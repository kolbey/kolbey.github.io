<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ROS实操_话题发布</title>
      <link href="/2023/03/10/ros-shi-cao-hua-ti-fa-bu/"/>
      <url>/2023/03/10/ros-shi-cao-hua-ti-fa-bu/</url>
      
        <content type="html"><![CDATA[<p><strong>需求描述:</strong> 编码实现乌龟运动控制，让小乌龟做圆周运动。</p><p><strong>实现分析:</strong> </p><blockquote><ol><li>乌龟运动控制实现，关键节点有两个，一个是乌龟运动显示节点 turtlesim_node，另一个是控制节点，二者是订阅发布模式实现通信的，乌龟运动显示节点直接调用即可，运动控制节点之前是使用的 turtle_teleop_key通过键盘 控制，现在需要自定义控制节点。</li><li>控制节点自实现时，首先需要了解控制节点与显示节点通信使用的话题与消息，可以使用ros命令结合计算图来获取。</li><li>了解了话题与消息之后，通过 C++ 或 Python 编写运动控制节点，通过指定的话题，按照一定的逻辑发布消息即可。</li></ol></blockquote><p><strong>实现流程:</strong> </p><blockquote><ol><li>通过计算图结合ros命令获取话题与消息信息。</li><li>编码实现运动控制节点。</li><li>启动 roscore、turtlesim_node 以及自定义的控制节点，查看运行结果。</li></ol></blockquote><h3 id="1-话题与消息获取"><a href="#1-话题与消息获取" class="headerlink" title="1. 话题与消息获取"></a>1. 话题与消息获取</h3><p><strong>准备:</strong>  先启动键盘控制乌龟运动案例。</p><h4 id="1-1-话题获取"><a href="#1-1-话题获取" class="headerlink" title="1.1 话题获取"></a>1.1 话题获取</h4><p><strong>获取话题:</strong> &#x2F;turtle1&#x2F;cmd_vel</p><p>通过 rostopic 列出话题:</p><pre class="line-numbers language-none"><code class="language-none">rostopic list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-消息获取"><a href="#1-2-消息获取" class="headerlink" title="1.2 消息获取"></a>1.2 消息获取</h4><p><strong>获取消息类型:</strong> geometry_msgs&#x2F;Twist</p><pre class="line-numbers language-none"><code class="language-none">rostopic type &#x2F;turtle1&#x2F;cmd_vel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>获取消息格式:</strong> </p><pre class="line-numbers language-none"><code class="language-none">rosmsg info geometry_msgs&#x2F;Twist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>响应结果:</strong> </p><pre class="line-numbers language-none"><code class="language-none">geometry_msgs&#x2F;Vector3 linear  float64 x  float64 y  float64 zgeometry_msgs&#x2F;Vector3 angular  float64 x  float64 y  float64 z<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>linear(线速度) 下的xyz分别对应在x、y和z方向上的速度(单位是 m&#x2F;s)；</p><p>angular(角速度)下的xyz分别对应x轴上的翻滚、y轴上俯仰和z轴上偏航的速度(单位是rad&#x2F;s)。</p><h3 id="2-实现发布节点"><a href="#2-实现发布节点" class="headerlink" title="2. 实现发布节点"></a>2. 实现发布节点</h3><p>创建功能包需要依赖的功能包: roscpp rospy std_msgs geometry_msgs</p><pre class="line-numbers language-none"><code class="language-none">carkin_create_pkg dotopic rospy std_msgs geometry_msgscd dotopicmkdir scriptscd scriptstouch pub_topic.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token triple-quoted-string string">"""    编写 ROS 节点，控制小乌龟画圆    准备工作:        1.获取topic(已知: /turtle1/cmd_vel)        2.获取消息类型(已知: geometry_msgs/Twist)        3.运行前，注意先启动 turtlesim_node 节点    实现流程:        1.导包        2.初始化 ROS 节点        3.创建发布者对象        4.循环发布运动控制消息"""</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> geometry_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Twist<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># 2.初始化 ROS 节点</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">"control_circle_p"</span><span class="token punctuation">)</span>    <span class="token comment"># 3.创建发布者对象</span>    pub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Publisher<span class="token punctuation">(</span><span class="token string">"/turtle1/cmd_vel"</span><span class="token punctuation">,</span>Twist<span class="token punctuation">,</span>queue_size<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment"># 4.循环发布运动控制消息</span>    rate <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Rate<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    msg <span class="token operator">=</span> Twist<span class="token punctuation">(</span><span class="token punctuation">)</span>    msg<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1.0</span>    msg<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0.0</span>    msg<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0.0</span>    msg<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0.0</span>    msg<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0.0</span>    msg<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0.5</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> rospy<span class="token punctuation">.</span>is_shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pub<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        rate<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">chmod +x pub_topic.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑<code>**dotopic**</code>下的<strong>CmakeLists.txt文件</strong></p><pre class="line-numbers language-none"><code class="language-none">catkin_install_python(PROGRAMS   scripts&#x2F;pub_topic.py  DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h3><p>工作空间下，编译并初始化环境变量</p><pre class="line-numbers language-none"><code class="language-none">catkin_makesource devel&#x2F;setup.bashroscorerosrun turtlesim turtlesim_noderosrun dotopic pub_topic.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS常用命令</title>
      <link href="/2023/03/10/ros-chang-yong-ming-ling/"/>
      <url>/2023/03/10/ros-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>机器人系统中启动的节点少则几个，多则十几个、几十个，不同的节点名称各异，通信时使用话题、服务、消息、参数等等都各不相同，一个显而易见的问题是: 当需要自定义节点和其他某个已经存在的节点通信时，如何获取对方的话题、以及消息载体的格式呢？</p><p>在 ROS 同提供了一些实用的命令行工具，可以用于获取不同节点的各类信息，常用的命令如下:</p><blockquote><ul><li>rosnode : 操作节点</li><li>rostopic : 操作话题</li><li>rosservice : 操作服务</li><li>rosmsg : 操作msg消息</li><li>rossrv : 操作srv消息</li><li>rosparam : 操作参数</li></ul></blockquote><p><strong>作用：</strong> 和之前介绍的文件系统操作命令比较，文件操作命令是静态的，操作的是磁盘上的文件，而上述命令是动态的，在ROS程序启动后，可以动态的获取运行中的节点或参数的相关信息。</p><h3 id="1-rosnode"><a href="#1-rosnode" class="headerlink" title="1. rosnode"></a>1. rosnode</h3><p>rosnode 是用于获取节点信息的命令</p><pre class="line-numbers language-none"><code class="language-none">rosnode ping    测试到节点的连接状态rosnode list    列出活动节点rosnode info    打印节点信息rosnode machine    列出指定设备上节点rosnode kill    杀死某个节点rosnode cleanup    清除不可连接的节点， 例：启动乌龟节点，然后 ctrl + c 关闭，该节点并没被彻底清除，可用 cleanup 清除节点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-rostopic"><a href="#2-rostopic" class="headerlink" title="2. rostopic"></a>2. rostopic</h3><p><strong>rostopic</strong>包含rostopic命令行工具，用于显示有关ROS 主题的调试信息，包括发布者，订阅者，发布频率和ROS消息。它还包含一个实验性Python库，用于动态获取有关主题的信息并与之交互。</p><pre class="line-numbers language-none"><code class="language-none">rostopic bw     显示主题使用的带宽rostopic delay  显示带有 header 的主题延迟rostopic echo   打印消息到屏幕rostopic find   根据类型查找主题rostopic hz     显示主题的发布频率rostopic info   显示主题相关信息rostopic list   显示所有活动状态下的主题rostopic pub    将数据发布到主题rostopic type   打印主题类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>rostopic list</strong>(-v)</li></ul><p>直接调用即可，控制台将打印当前运行状态下的主题名称</p><p>rostopic list -v : 获取话题详情(比如列出：发布者和订阅者个数…</p><ul><li><strong>rostopic pub</strong></li></ul><p>可以直接调用命令向订阅者发布消息</p><p>为roboware 自动生成的 发布&#x2F;订阅 模型案例中的 订阅者 发布一条字符串</p><pre class="line-numbers language-none"><code class="language-none">rostopic pub &#x2F;主题名称 消息类型 消息内容rostopic pub &#x2F;chatter std_msgs gagaxixi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为 小乌龟案例的 订阅者 发布一条运动信息</p><pre class="line-numbers language-none"><code class="language-none">rostopic pub &#x2F;turtle1&#x2F;cmd_vel geometry_msgs&#x2F;Twist &quot;linear:  x: 1.0  y: 0.0  z: 0.0angular:  x: 0.0  y: 0.0  z: 2.0&quot;&#x2F;&#x2F;只发布一次运动信息rostopic pub -r 10 &#x2F;turtle1&#x2F;cmd_vel geometry_msgs&#x2F;Twist &quot;linear:  x: 1.0  y: 0.0  z: 0.0angular:  x: 0.0  y: 0.0  z: 2.0&quot;&#x2F;&#x2F; 以 10HZ 的频率循环发送运动信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-rosmsg"><a href="#3-rosmsg" class="headerlink" title="3. rosmsg"></a>3. rosmsg</h3><p>rosmsg是用于显示有关 ROS消息类型的 信息的命令行工具。</p><pre class="line-numbers language-none"><code class="language-none">rosmsg show    显示消息描述rosmsg info    显示消息信息rosmsg list    列出所有消息rosmsg md5    显示 md5 加密后的消息rosmsg package    显示某个功能包下的所有消息rosmsg packages    列出包含消息的功能包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>rosmsg package</strong></li></ul><p>列出某个包下的所有msg</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;rosmsg package 包名 rosmsg package turtlesim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>rosmsg show</strong></li></ul><p>显示消息描述</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;rosmsg show 消息名称rosmsg show turtlesim&#x2F;Pose结果:float32 xfloat32 yfloat32 thetafloat32 linear_velocityfloat32 angular_velocity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-rosservice"><a href="#4-rosservice" class="headerlink" title="4. rosservice"></a>4. rosservice</h3><p>rosservice包含用于列出和查询ROS<a href="http://wiki.ros.org/Services">Services</a>的rosservice命令行工具。</p><p>调用部分服务时，如果对相关工作空间没有配置 path，需要进入工作空间调用 source .&#x2F;devel&#x2F;setup.bash</p><pre class="line-numbers language-none"><code class="language-none">rosservice args 打印服务参数rosservice call    使用提供的参数调用服务rosservice find    按照服务类型查找服务rosservice info    打印有关服务的信息rosservice list    列出所有活动的服务rosservice type    打印服务类型rosservice uri    打印服务的 ROSRPC uri<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>rosservice list</strong></li></ul><p>列出所有活动的 service</p><pre class="line-numbers language-none"><code class="language-none">~ rosservice list&#x2F;clear&#x2F;kill&#x2F;listener&#x2F;get_loggers&#x2F;listener&#x2F;set_logger_level&#x2F;reset&#x2F;rosout&#x2F;get_loggers&#x2F;rosout&#x2F;set_logger_level&#x2F;rostopic_4985_1578723066421&#x2F;get_loggers&#x2F;rostopic_4985_1578723066421&#x2F;set_logger_level&#x2F;rostopic_5582_1578724343069&#x2F;get_loggers&#x2F;rostopic_5582_1578724343069&#x2F;set_logger_level&#x2F;spawn&#x2F;turtle1&#x2F;set_pen&#x2F;turtle1&#x2F;teleport_absolute&#x2F;turtle1&#x2F;teleport_relative&#x2F;turtlesim&#x2F;get_loggers&#x2F;turtlesim&#x2F;set_logger_level<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>rosservice args</strong></li></ul><p>打印服务参数</p><pre class="line-numbers language-none"><code class="language-none">rosservice args &#x2F;spawnx y theta name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>rosservice call</strong></li></ul><p>调用服务</p><p>为小乌龟的案例生成一只新的乌龟</p><pre class="line-numbers language-none"><code class="language-none">rosservice call &#x2F;spawn &quot;x: 1.0y: 2.0theta: 0.0name: &#39;xxx&#39;&quot;name: &quot;xxx&quot;&#x2F;&#x2F;生成一只叫 xxx 的乌龟<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-rossrv"><a href="#5-rossrv" class="headerlink" title="5. rossrv"></a>5. rossrv</h3><p>rossrv是用于显示有关ROS服务类型的信息的命令行工具，与 rosmsg 使用语法高度雷同。</p><pre class="line-numbers language-none"><code class="language-none">rossrv show    显示服务消息详情rossrv info    显示服务消息相关信息rossrv list    列出所有服务信息rossrv md5    显示 md5 加密后的服务消息rossrv package    显示某个包下所有服务消息rossrv packages    显示包含服务消息的所有包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-rosparam"><a href="#6-rosparam" class="headerlink" title="6. rosparam"></a>6. rosparam</h3><p>rosparam包含rosparam命令行工具，用于使用YAML编码文件在参数服务器上获取和设置ROS参数。</p><pre class="line-numbers language-none"><code class="language-none">rosparam set    设置参数rosparam get    获取参数rosparam load    从外部文件加载参数rosparam dump    将参数写出到外部文件rosparam delete    删除参数rosparam list    列出所有参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>rosparam list</strong></li></ul><p>列出所有参数</p><pre class="line-numbers language-none"><code class="language-none">rosparam list&#x2F;&#x2F;默认结果&#x2F;rosdistro&#x2F;roslaunch&#x2F;uris&#x2F;host_helloros_virtual_machine__42911&#x2F;rosversion&#x2F;run_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>rosparam set</strong></li></ul><p>设置参数</p><pre class="line-numbers language-none"><code class="language-none">rosparam set name huluwa&#x2F;&#x2F;再次调用 rosparam list 结果&#x2F;name&#x2F;rosdistro&#x2F;roslaunch&#x2F;uris&#x2F;host_helloros_virtual_machine__42911&#x2F;rosversion&#x2F;run_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>rosparam get</strong></li></ul><p>获取参数</p><pre class="line-numbers language-none"><code class="language-none">rosparam get name&#x2F;&#x2F;结果huluwa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>rosparam delete</strong></li></ul><p>删除参数</p><pre class="line-numbers language-none"><code class="language-none">rosparam delete name&#x2F;&#x2F;结果&#x2F;&#x2F;去除了name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>rosparam load(先准备 yaml 文件)</strong></li></ul><p>从外部文件加载参数</p><pre class="line-numbers language-none"><code class="language-none">rosparam load xxx.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>rosparam dump</strong></li></ul><p>将参数写出到外部文件</p><pre class="line-numbers language-none"><code class="language-none">rosparam dump yyy.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS参数服务器</title>
      <link href="/2023/03/10/ros-can-shu-fu-wu-qi/"/>
      <url>/2023/03/10/ros-can-shu-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-参数服务器"><a href="#1-参数服务器" class="headerlink" title="1. 参数服务器"></a>1. 参数服务器</h3><p>参数服务器在ROS中主要用于实现不同节点之间的数据共享。参数服务器相当于是独立于所有节点的一个公共容器，可以将数据存储在该容器中，被不同的节点调用，当然不同的节点也可以往其中存储数据，关于参数服务器的典型应用场景如下:</p><blockquote><p>导航实现时，会进行路径规划，比如: 全局路径规划，设计一个从出发点到目标点的大致路径。本地路径规划，会根据当前路况生成时时的行进路径</p></blockquote><p>上述场景中，全局路径规划和本地路径规划时，就会使用到参数服务器：路径规划时，需要参考小车的尺寸，我们可以将这些尺寸信息存储到参数服务器，全局路径规划节点与本地路径规划节点都可以从参数服务器中调用这些参数。</p><blockquote><p>参数服务器，一般适用于存在数据共享的一些应用场景。</p><p><strong>注意:</strong> 参数服务器不是为高性能而设计的，因此最好用于存储静态的非二进制的简单数据。</p></blockquote><p>参数可使用数据类型:</p><blockquote><ul><li>32-bit integers</li><li>booleans</li><li>strings</li><li>doubles</li><li>iso8601 dates</li><li>lists</li><li>base64-encoded binary data</li><li>字典</li></ul></blockquote><h3 id="2-创建并使用参数服务器"><a href="#2-创建并使用参数服务器" class="headerlink" title="2. 创建并使用参数服务器"></a>2. 创建并使用参数服务器</h3><p><strong>需求:</strong> 实现参数服务器参数的增删改查操作。</p><p>预先准备好ROS工作空间，具体的操作可以参考另外一篇博客笔记，<a href="https://kolbey.github.io/2023/03/09/ros-chuang-jian-xiang-mu-liu-cheng/">ROS创建项目流程</a>。具体的操作流程如下：</p><blockquote><ul><li>创建工作空间；</li><li>进入src创建ROS包并添加依赖；</li><li>进入ROS包添加scripts目录并编辑下列python文件</li><li>为python文件添加可执行权限</li><li>在ROS包下的CMakeLists.txt中添加<code>**catkin_install_python**</code>内的<code>**scripts/自定义文件名.py**</code>;</li><li>在工作环境目录下进行编译<code>**catkin_make**</code>；</li><li>在新建的terminal内初始化环境变量<code>**source devel/setup.bash**</code>；</li><li>启动<code>roscore</code>，启动脚本<code>**rosrun ros包名称 自定义文件名.py**</code>。</li></ul></blockquote><h4 id="2-1-参数服务器新增（修改）参数"><a href="#2-1-参数服务器新增（修改）参数" class="headerlink" title="2.1 参数服务器新增（修改）参数"></a>2.1 参数服务器新增（修改）参数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token triple-quoted-string string">"""    参数服务器操作之新增与修改(二者API一样)_Python实现:"""</span><span class="token keyword">import</span> rospy<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">"set_update_paramter_p"</span><span class="token punctuation">)</span>    <span class="token comment"># 设置各种类型参数</span>    rospy<span class="token punctuation">.</span>set_param<span class="token punctuation">(</span><span class="token string">"p_int"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>set_param<span class="token punctuation">(</span><span class="token string">"p_double"</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>set_param<span class="token punctuation">(</span><span class="token string">"p_bool"</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>set_param<span class="token punctuation">(</span><span class="token string">"p_string"</span><span class="token punctuation">,</span><span class="token string">"hello python"</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>set_param<span class="token punctuation">(</span><span class="token string">"p_list"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"haha"</span><span class="token punctuation">,</span><span class="token string">"xixi"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>set_param<span class="token punctuation">(</span><span class="token string">"p_dict"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"hulu"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 修改</span>    rospy<span class="token punctuation">.</span>set_param<span class="token punctuation">(</span><span class="token string">"p_int"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-参数服务器获取参数"><a href="#2-2-参数服务器获取参数" class="headerlink" title="2.2 参数服务器获取参数"></a>2.2 参数服务器获取参数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token triple-quoted-string string">"""    参数服务器操作之查询_Python实现:            get_param(键,默认值)            当键存在时，返回对应的值，如果不存在返回默认值        get_param_cached        get_param_names        has_param        search_param"""</span><span class="token keyword">import</span> rospy<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">"get_param_p"</span><span class="token punctuation">)</span>    <span class="token comment">#获取参数</span>    int_value <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"p_int"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span>    double_value <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"p_double"</span><span class="token punctuation">)</span>    bool_value <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"p_bool"</span><span class="token punctuation">)</span>    string_value <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"p_string"</span><span class="token punctuation">)</span>    p_list <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"p_list"</span><span class="token punctuation">)</span>    p_dict <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"p_dict"</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"获取的数据:%d,%.2f,%d,%s"</span><span class="token punctuation">,</span>                int_value<span class="token punctuation">,</span>                double_value<span class="token punctuation">,</span>                bool_value<span class="token punctuation">,</span>                string_value<span class="token punctuation">)</span>    <span class="token keyword">for</span> ele <span class="token keyword">in</span> p_list<span class="token punctuation">:</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"ele = %s"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"name = %s, age = %d"</span><span class="token punctuation">,</span>p_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>p_dict<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># get_param_cached</span>    int_cached <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param_cached<span class="token punctuation">(</span><span class="token string">"p_int"</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"缓存数据:%d"</span><span class="token punctuation">,</span>int_cached<span class="token punctuation">)</span>    <span class="token comment"># get_param_names</span>    names <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param_names<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"name = %s"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">80</span><span class="token punctuation">)</span>    <span class="token comment"># has_param</span>    flag <span class="token operator">=</span> rospy<span class="token punctuation">.</span>has_param<span class="token punctuation">(</span><span class="token string">"p_int"</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"包含p_int吗？%d"</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span>    <span class="token comment"># search_param</span>    key <span class="token operator">=</span> rospy<span class="token punctuation">.</span>search_param<span class="token punctuation">(</span><span class="token string">"p_int"</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"搜索的键 = %s"</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-参数服务器删除参数"><a href="#2-3-参数服务器删除参数" class="headerlink" title="2.3 参数服务器删除参数"></a>2.3 参数服务器删除参数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token triple-quoted-string string">"""    参数服务器操作之删除_Python实现:    rospy.delete_param("键")    键存在时，可以删除成功，键不存在时，会抛出异常"""</span><span class="token keyword">import</span> rospy<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">"delete_param_p"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        rospy<span class="token punctuation">.</span>delete_param<span class="token punctuation">(</span><span class="token string">"p_int"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"删除失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS服务通信</title>
      <link href="/2023/03/10/ros-fu-wu-tong-xin/"/>
      <url>/2023/03/10/ros-fu-wu-tong-xin/</url>
      
        <content type="html"><![CDATA[<h3 id="1-服务通信自定义srv"><a href="#1-服务通信自定义srv" class="headerlink" title="1. 服务通信自定义srv"></a>1. 服务通信自定义srv</h3><p>服务通信也是ROS中一种极其常用的通信模式，服务通信是基于<strong>请求响应</strong>模式的，是一种应答机制。也即: 一个节点A向另一个节点B发送请求，B接收处理请求并产生响应结果返回给A。比如如下场景:</p><blockquote><p>机器人巡逻过程中，控制系统分析传感器数据发现可疑物体或人… 此时需要拍摄照片并留存。</p></blockquote><p>在上述场景中，就使用到了服务通信。一个节点需要向相机节点发送拍照请求，相机节点处理请求，并返回处理结果。与上述应用类似的，服务通信更适用于对时时性有要求、具有一定逻辑处理的应用场景。</p><p><strong>需求:</strong> 服务通信中，客户端提交两个整数至服务端，服务端求和并响应结果到客户端，请创建服务器与客户端通信的数据载体。</p><p><strong>流程:</strong> srv 文件内的可用数据类型与 msg 文件一致，且定义 srv 实现流程与自定义 msg 实现流程类似:</p><blockquote><ol><li>按照固定格式创建srv文件</li><li>编辑配置文件</li><li>编译生成中间文件</li></ol></blockquote><h4 id="1-1-定义srv文件"><a href="#1-1-定义srv文件" class="headerlink" title="1.1 定义srv文件"></a>1.1 定义srv文件</h4><p>服务通信中，数据分成两部分，请求与响应，在 srv 文件中请求和响应使用<code>---</code>分割，具体实现如下:</p><p>功能包下新建 srv 目录，添加 xxx.srv 文件，内容:</p><pre class="line-numbers language-none"><code class="language-none"># 客户端请求时发送的两个数字int32 num1int32 num2---# 服务器响应发送的数据int32 sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-编辑配置文件"><a href="#1-2-编辑配置文件" class="headerlink" title="1.2 编辑配置文件"></a>1.2 编辑配置文件</h4><p><strong>package.xml</strong>中添加编译依赖与执行依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;build_depend&gt;message_generation&lt;&#x2F;build_depend&gt;&lt;exec_depend&gt;message_runtime&lt;&#x2F;exec_depend&gt;&lt;!-- exce_depend 以前对应的是 run_depend 现在非法--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CMakeLists.txt</strong>编辑 srv 相关配置</p><pre class="line-numbers language-none"><code class="language-none">find_package(catkin REQUIRED COMPONENTS  roscpp  rospy  std_msgs  message_generation)# 需要加入 message_generation,必须有 std_msgs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">add_service_files(  FILES  AddInts.srv)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">generate_messages(  DEPENDENCIES  std_msgs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong>  官网没有在 catkin_package 中配置 message_runtime,经测试配置也可以</p><h4 id="1-3-编译"><a href="#1-3-编译" class="headerlink" title="1.3 编译"></a>1.3 编译</h4><p>在工作空间下进行编译，<strong>注意</strong>单纯改动python文件不需要进行编译，其他改动一般都是需要编译的，此外，每次新打开的terminal都需要通过<strong>source配置环境</strong>。</p><pre class="line-numbers language-none"><code class="language-none">#  编译---工作空间catkin_make#  工作空间内配置环境变量---新建terminal时source devel&#x2F;setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编译后产生中间文件供C++或Python调用，后续调用相关 srv时，是从这些中间文件调用的：</strong></p><p>C++ 需要调用的中间文件(…&#x2F;工作空间&#x2F;devel&#x2F;include&#x2F;包名&#x2F;xxx.h)</p><p><img src="/./images/ROS%E6%9E%B6%E6%9E%84/3.png"></p><p>Python 需要调用的中间文件(…&#x2F;工作空间&#x2F;devel&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;包名&#x2F;srv)</p><p><img src="/./images/ROS%E6%9E%B6%E6%9E%84/4.png"></p><h3 id="2-服务通信自定义srv调用"><a href="#2-服务通信自定义srv调用" class="headerlink" title="2. 服务通信自定义srv调用"></a>2. 服务通信自定义srv调用</h3><p><strong>需求:</strong> 编写服务通信，客户端提交两个整数至服务端，服务端求和并响应结果到客户端。</p><p><strong>流程:</strong></p><blockquote><ol><li>编写服务端实现；</li><li>编写客户端实现；</li><li>为python文件添加可执行权限；</li><li>编辑配置文件；</li><li>编译并执行。</li></ol></blockquote><h4 id="2-1-服务端"><a href="#2-1-服务端" class="headerlink" title="2.1 服务端"></a>2.1 服务端</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token triple-quoted-string string">"""    需求:         编写两个节点实现服务通信，客户端节点需要提交两个整数到服务器        服务器需要解析客户端提交的数据，相加后，将结果响应回客户端，        客户端再解析    服务器端实现:        1.导包        2.初始化 ROS 节点        3.创建服务对象        4.回调函数处理请求并产生响应        5.spin 函数"""</span><span class="token comment"># 1.导包</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> demo03_server_client<span class="token punctuation">.</span>srv <span class="token keyword">import</span> AddInts<span class="token punctuation">,</span>AddIntsRequest<span class="token punctuation">,</span>AddIntsResponse<span class="token comment"># 回调函数的参数是请求对象，返回值是响应对象</span><span class="token keyword">def</span> <span class="token function">doReq</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 解析提交的数据</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>num1 <span class="token operator">+</span> req<span class="token punctuation">.</span>num2    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"提交的数据:num1 = %d, num2 = %d, sum = %d"</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>num1<span class="token punctuation">,</span> req<span class="token punctuation">.</span>num2<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>    <span class="token comment"># 创建响应对象，赋值并返回</span>    <span class="token comment"># resp = AddIntsResponse()</span>    <span class="token comment"># resp.sum = sum</span>    resp <span class="token operator">=</span> AddIntsResponse<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># 2.初始化 ROS 节点</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">"addints_server_p"</span><span class="token punctuation">)</span>    <span class="token comment"># 3.创建服务对象</span>    server <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Service<span class="token punctuation">(</span><span class="token string">"AddInts"</span><span class="token punctuation">,</span>AddInts<span class="token punctuation">,</span>doReq<span class="token punctuation">)</span>    <span class="token comment"># 4.回调函数处理请求并产生响应</span>    <span class="token comment"># 5.spin 函数</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-客户端"><a href="#2-2-客户端" class="headerlink" title="2.2 客户端"></a>2.2 客户端</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token triple-quoted-string string">"""    需求:         编写两个节点实现服务通信，客户端节点需要提交两个整数到服务器        服务器需要解析客户端提交的数据，相加后，将结果响应回客户端，        客户端再解析    客户端实现:        1.导包        2.初始化 ROS 节点        3.创建请求对象        4.发送请求        5.接收并处理响应    优化:        加入数据的动态获取"""</span><span class="token comment">#1.导包</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> demo03_server_client<span class="token punctuation">.</span>srv <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> sys<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment">#优化实现</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>        rospy<span class="token punctuation">.</span>logerr<span class="token punctuation">(</span><span class="token string">"请正确提交参数"</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 2.初始化 ROS 节点</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">"AddInts_Client_p"</span><span class="token punctuation">)</span>    <span class="token comment"># 3.创建请求对象</span>    client <span class="token operator">=</span> rospy<span class="token punctuation">.</span>ServiceProxy<span class="token punctuation">(</span><span class="token string">"AddInts"</span><span class="token punctuation">,</span>AddInts<span class="token punctuation">)</span>    <span class="token comment"># 请求前，等待服务已经就绪</span>    <span class="token comment"># 方式1:</span>    <span class="token comment"># rospy.wait_for_service("AddInts")</span>    <span class="token comment"># 方式2</span>    client<span class="token punctuation">.</span>wait_for_service<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 4.发送请求,接收并处理响应</span>    <span class="token comment"># 方式1</span>    <span class="token comment"># resp = client(3,4)</span>    <span class="token comment"># 方式2</span>    <span class="token comment"># resp = client(AddIntsRequest(1,5))</span>    <span class="token comment"># 方式3</span>    req <span class="token operator">=</span> AddIntsRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># req.num1 = 100</span>    <span class="token comment"># req.num2 = 200 </span>    <span class="token comment">#优化</span>    req<span class="token punctuation">.</span>num1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    req<span class="token punctuation">.</span>num2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     resp <span class="token operator">=</span> client<span class="token punctuation">.</span>call<span class="token punctuation">(</span>req<span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"响应结果:%d"</span><span class="token punctuation">,</span>resp<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-设置权限"><a href="#2-3-设置权限" class="headerlink" title="2.3 设置权限"></a>2.3 设置权限</h4><p>终端下进入 scripts 执行:<code>chmod +x *.py</code></p><h4 id="2-4-配置CMakeLists-txt"><a href="#2-4-配置CMakeLists-txt" class="headerlink" title="2.4 配置CMakeLists.txt"></a>2.4 配置CMakeLists.txt</h4><p><strong>CMakeLists.txt</strong></p><pre class="line-numbers language-none"><code class="language-none">catkin_install_python(PROGRAMS  scripts&#x2F;AddInts_Server_p.py   scripts&#x2F;AddInts_Client_p.py  DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-执行"><a href="#2-5-执行" class="headerlink" title="2.5 执行"></a>2.5 执行</h4><p><strong>流程:</strong></p><ul><li>需要先启动服务:<code>rosrun 包名 服务</code></li><li>然后再调用客户端 :<code>rosrun 包名 客户端 参数1 参数2</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS话题通信</title>
      <link href="/2023/03/09/ros-hua-ti-tong-xin/"/>
      <url>/2023/03/09/ros-hua-ti-tong-xin/</url>
      
        <content type="html"><![CDATA[<h3 id="1-话题通信基本操作"><a href="#1-话题通信基本操作" class="headerlink" title="1. 话题通信基本操作"></a>1. 话题通信基本操作</h3><p><strong>需求:</strong> 编写发布订阅实现，要求发布方以10HZ(每秒10次)的频率发布文本消息，订阅方订阅消息并将消息内容打印输出。</p><p><strong>流程:</strong></p><blockquote><ol><li>编写发布方实现；</li><li>编写订阅方实现；</li><li>为python文件添加可执行权限；</li><li>编辑配置文件；</li><li>编译并执行。</li></ol></blockquote><h4 id="1-1-发布方"><a href="#1-1-发布方" class="headerlink" title="1.1 发布方"></a>1.1 发布方</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token triple-quoted-string string">"""    需求: 实现基本的话题通信，一方发布数据，一方接收数据，         实现的关键点:         1.发送方         2.接收方         3.数据(此处为普通文本)         PS: 二者需要设置相同的话题    消息发布方:        循环发布信息:HelloWorld 后缀数字编号    实现流程:        1.导包         2.初始化 ROS 节点:命名(唯一)        3.实例化 发布者 对象        4.组织被发布的数据，并编写逻辑发布数据"""</span><span class="token comment">#1.导包 </span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> std_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> String<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment">#2.初始化 ROS 节点:命名(唯一)</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">"talker_p"</span><span class="token punctuation">)</span>    <span class="token comment">#3.实例化 发布者 对象</span>    pub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Publisher<span class="token punctuation">(</span><span class="token string">"chatter"</span><span class="token punctuation">,</span>String<span class="token punctuation">,</span>queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment">#4.组织被发布的数据，并编写逻辑发布数据</span>    msg <span class="token operator">=</span> String<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#创建 msg 对象</span>    msg_front <span class="token operator">=</span> <span class="token string">"hello 你好"</span>    count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">#计数器 </span>    <span class="token comment"># 设置循环频率</span>    rate <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Rate<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> rospy<span class="token punctuation">.</span>is_shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#拼接字符串</span>        msg<span class="token punctuation">.</span>data <span class="token operator">=</span> msg_front <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>        pub<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        rate<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"写出的数据:%s"</span><span class="token punctuation">,</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-订阅方"><a href="#1-2-订阅方" class="headerlink" title="1.2 订阅方"></a>1.2 订阅方</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token triple-quoted-string string">"""    需求: 实现基本的话题通信，一方发布数据，一方接收数据，         实现的关键点:         1.发送方         2.接收方         3.数据(此处为普通文本)    消息订阅方:        订阅话题并打印接收到的消息    实现流程:        1.导包         2.初始化 ROS 节点:命名(唯一)        3.实例化 订阅者 对象        4.处理订阅的消息(回调函数)        5.设置循环调用回调函数"""</span><span class="token comment">#1.导包 </span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> std_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> String<span class="token keyword">def</span> <span class="token function">doMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"I heard:%s"</span><span class="token punctuation">,</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment">#2.初始化 ROS 节点:命名(唯一)</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">"listener_p"</span><span class="token punctuation">)</span>    <span class="token comment">#3.实例化 订阅者 对象</span>    sub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span><span class="token string">"chatter"</span><span class="token punctuation">,</span>String<span class="token punctuation">,</span>doMsg<span class="token punctuation">,</span>queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment">#4.处理订阅的消息(回调函数)</span>    <span class="token comment">#5.设置循环调用回调函数</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-添加可执行权限"><a href="#1-3-添加可执行权限" class="headerlink" title="1.3 添加可执行权限"></a>1.3 添加可执行权限</h4><p>终端下进入 scripts 执行:<code>chmod +x *.py</code></p><h4 id="1-4-配置CMakeLists-txt"><a href="#1-4-配置CMakeLists-txt" class="headerlink" title="1.4 配置CMakeLists.txt"></a>1.4 配置CMakeLists.txt</h4><pre class="line-numbers language-none"><code class="language-none">catkin_install_python(PROGRAMS  scripts&#x2F;talker_p.py  scripts&#x2F;listener_p.py  DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5-执行"><a href="#1-5-执行" class="headerlink" title="1.5 执行"></a>1.5 执行</h4><ol><li>启动roscore</li><li>启动发布节点</li><li>启动订阅节点</li></ol><h3 id="2-话题通信自定义msg"><a href="#2-话题通信自定义msg" class="headerlink" title="2. 话题通信自定义msg"></a>2. 话题通信自定义msg</h3><p>在 ROS 通信协议中，数据载体是一个较为重要组成部分，ROS 中通过 std_msgs 封装了一些原生的数据类型,比如:String、Int32、Int64、Char、Bool、Empty…. 但是，这些数据一般只包含一个 data 字段，结构的单一意味着功能上的局限性，当传输一些复杂的数据，比如: 激光雷达的信息… std_msgs 由于描述性较差而显得力不从心，这种场景下可以使用自定义的消息类型。</p><p>ROS中还有一种特殊类型：<code>Header</code>，标头包含时间戳和ROS中常用的坐标帧信息。会经常看到msg文件的第一行具有<code>Header标头</code>。</p><p><strong>需求:</strong> 创建自定义消息，该消息包含人的信息:姓名、身高、年龄等。</p><p><strong>流程:</strong></p><blockquote><ol><li>按照固定格式创建 msg 文件</li><li>编辑配置文件</li><li>编译生成可以被 Python 或 C++ 调用的中间文件</li></ol></blockquote><h4 id="2-1-定义msg文件"><a href="#2-1-定义msg文件" class="headerlink" title="2.1 定义msg文件"></a>2.1 定义msg文件</h4><p>功能包下新建 msg 目录，添加文件 Person.msg</p><pre class="line-numbers language-none"><code class="language-none">string nameuint16 agefloat64 height<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-2-编辑配置文件"><a href="#2-2-编辑配置文件" class="headerlink" title="2.2 编辑配置文件"></a>2.2 编辑配置文件</h4><p>功能包内的<strong>package.xml</strong>中添加编译依赖与执行依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;build_depend&gt;message_generation&lt;&#x2F;build_depend&gt;&lt;exec_depend&gt;message_runtime&lt;&#x2F;exec_depend&gt;&lt;!-- exce_depend 以前对应的是 run_depend 现在非法--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>功能包内的<strong>CMakeLists.txt</strong>编辑 msg 相关配置</p><pre class="line-numbers language-none"><code class="language-none">find_package(catkin REQUIRED COMPONENTS  roscpp  rospy  std_msgs  message_generation)# 需要加入 message_generation,必须有 std_msgs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">## 配置 msg 源文件add_message_files(  FILES  Person.msg)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 生成消息时依赖于 std_msgsgenerate_messages(  DEPENDENCIES  std_msgs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#执行时依赖catkin_package(#  INCLUDE_DIRS include#  LIBRARIES demo02_talker_listener  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime#  DEPENDS system_lib)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-编译"><a href="#2-3-编译" class="headerlink" title="2.3 编译"></a>2.3 编译</h4><p>在工作空间下进行编译，<strong>注意</strong>单纯改动python文件不需要进行编译，其他改动一般都是需要编译的，此外，每次新打开的terminal都需要通过<strong>source配置环境</strong>。</p><pre class="line-numbers language-none"><code class="language-none">#  编译---工作空间catkin_make#  配置环境变量---新建terminal时source devel&#x2F;setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编译后产生中间文件供C++或Python调用，后续调用相关 msg 时，是从这些中间文件调用的：</strong></p><p>C++ 需要调用的中间文件(…&#x2F;工作空间&#x2F;devel&#x2F;include&#x2F;包名&#x2F;xxx.h)</p><p><img src="/./images/ROS%E6%9E%B6%E6%9E%84/1.png"></p><p>Python 需要调用的中间文件(…&#x2F;工作空间&#x2F;devel&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;包名&#x2F;msg)</p><p><img src="/./images/ROS%E6%9E%B6%E6%9E%84/2.png"></p><h4 id="2-4-发布方"><a href="#2-4-发布方" class="headerlink" title="2.4 发布方"></a>2.4 发布方</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token triple-quoted-string string">"""    发布方:        循环发送消息"""</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> demo02_talker_listener<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Person<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment">#1.初始化 ROS 节点</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">"talker_person_p"</span><span class="token punctuation">)</span>    <span class="token comment">#2.创建发布者对象</span>    pub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Publisher<span class="token punctuation">(</span><span class="token string">"chatter_person"</span><span class="token punctuation">,</span>Person<span class="token punctuation">,</span>queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment">#3.组织消息</span>    p <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"葫芦瓦"</span>    p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>    p<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">0.75</span>    <span class="token comment">#4.编写消息发布逻辑</span>    rate <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Rate<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> rospy<span class="token punctuation">.</span>is_shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pub<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token comment">#发布消息</span>        rate<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#休眠</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"姓名:%s, 年龄:%d, 身高:%.2f"</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">,</span> p<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-订阅方"><a href="#2-5-订阅方" class="headerlink" title="2.5 订阅方"></a>2.5 订阅方</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token triple-quoted-string string">"""    订阅方:        订阅消息"""</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> demo02_talker_listener<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Person<span class="token keyword">def</span> <span class="token function">doPerson</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"接收到的人的信息:%s, %d, %.2f"</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">,</span> p<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment">#1.初始化节点</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">"listener_person_p"</span><span class="token punctuation">)</span>    <span class="token comment">#2.创建订阅者对象</span>    sub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span><span class="token string">"chatter_person"</span><span class="token punctuation">,</span>Person<span class="token punctuation">,</span>doPerson<span class="token punctuation">,</span>queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#4.循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-权限设置"><a href="#2-6-权限设置" class="headerlink" title="2.6 权限设置"></a>2.6 权限设置</h4><p>终端下进入 scripts 执行:<code>chmod +x *.py</code></p><h4 id="2-7-配置CMakeLists-txt"><a href="#2-7-配置CMakeLists-txt" class="headerlink" title="2.7 配置CMakeLists.txt"></a>2.7 配置CMakeLists.txt</h4><pre class="line-numbers language-none"><code class="language-none">catkin_install_python(PROGRAMS  scripts&#x2F;talker_p.py  scripts&#x2F;listener_p.py  scripts&#x2F;person_talker.py  scripts&#x2F;person_listener.py  DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-8-执行"><a href="#2-8-执行" class="headerlink" title="2.8 执行"></a>2.8 执行</h4><p>1.启动 roscore;</p><p>2.启动发布节点;</p><p>3.启动订阅节点。</p><h3 id="3-ROS话题通信注意事项"><a href="#3-ROS话题通信注意事项" class="headerlink" title="3. ROS话题通信注意事项"></a>3. ROS话题通信注意事项</h3><ul><li>roscore的运行位置可以<strong>任意</strong>，只需启动ros master即可；</li><li>除改动python文件外，其他改动一般都需要在工作空间进行<strong>catkin_make</strong>的编译；</li><li>每次新建的terminal都需要在工作空间进行环境配置，即<strong>source devel&#x2F;setup.bash</strong>；</li><li>python文件的第一行一定不能忘记指定python解释器，即**#! &#x2F;usr&#x2F;bin&#x2F;env python**；</li><li>rosrun 功能包名 自定义文件名.py 与python 自定义文件名.py 启动程序效果相同；</li><li>自定义msg是在<strong>功能包内</strong>新建msg目录，并创建自定义msg名.msg；</li><li>编译生成msg中间文件后，在python文件导入msg内容，采用的是<strong>from 功能包.msg import 自定义msg名</strong>；</li></ul>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS创建项目流程</title>
      <link href="/2023/03/09/ros-chuang-jian-xiang-mu-liu-cheng/"/>
      <url>/2023/03/09/ros-chuang-jian-xiang-mu-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p><img src="/./images/ROS%E6%9E%B6%E6%9E%84/0.png"></p><p>​ROS中涉及的编程语言以C++和Python为主，ROS中的大多数程序两者都可以实现，同时，ROS中的程序即便使用不同的编程语言，实现流程也大致类似，以当前HelloWorld程序为例，实现流程大致如下：</p><blockquote><ol><li>先创建一个工作空间；</li><li>再创建一个功能包；</li><li>编辑源文件；</li><li>编辑配置文件；</li><li>编译并执行。</li></ol></blockquote><p>​上述流程中，C++和Python只是在步骤3和步骤4的实现细节上存在差异，其他流程基本一致。</p><h3 id="1-创建工作空间并初始化"><a href="#1-创建工作空间并初始化" class="headerlink" title="1. 创建工作空间并初始化"></a>1. 创建工作空间并初始化</h3><pre class="line-numbers language-none"><code class="language-none">mkdir -p 自定义空间名称&#x2F;srccd 自定义空间名称catkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​上述命令，首先会创建一个工作空间以及一个 src 子目录，然后再进入工作空间调用 catkin_make命令编译。</p><h3 id="2-进入src创建ros包并添加依赖"><a href="#2-进入src创建ros包并添加依赖" class="headerlink" title="2. 进入src创建ros包并添加依赖"></a>2. 进入src创建ros包并添加依赖</h3><pre class="line-numbers language-none"><code class="language-none">cd srccatkin_create_pkg 自定义ROS包名 roscpp rospy std_msgs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​上述命令，会在工作空间下生成一个功能包，该功能包依赖于 roscpp、rospy 与 std_msgs，其中roscpp是使用C++实现的库，而rospy则是使用python实现的库，std_msgs是标准消息库，创建ROS功能包时，一般都会依赖这三个库实现。</p><h3 id="3-进入ros包添加scripts目录并编辑python文件"><a href="#3-进入ros包添加scripts目录并编辑python文件" class="headerlink" title="3. 进入ros包添加scripts目录并编辑python文件"></a>3. 进入ros包添加scripts目录并编辑python文件</h3><pre class="line-numbers language-none"><code class="language-none">cd ros包mkdir scripts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token triple-quoted-string string">"""    Python 版 HelloWorld"""</span><span class="token keyword">import</span> rospy<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Hello World!!!!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-为python文件添加可执行权限"><a href="#4-为python文件添加可执行权限" class="headerlink" title="4. 为python文件添加可执行权限"></a>4. 为python文件添加可执行权限</h3><pre class="line-numbers language-none"><code class="language-none">chmod +x 自定义文件名.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-编辑ros包下的CmakeLists-txt文件"><a href="#5-编辑ros包下的CmakeLists-txt文件" class="headerlink" title="5. 编辑ros包下的CmakeLists.txt文件"></a>5. 编辑ros包下的CmakeLists.txt文件</h3><pre class="line-numbers language-none"><code class="language-none">catkin_install_python(PROGRAMS scripts&#x2F;自定义文件名.py  DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-进入工作空间目录并编译"><a href="#6-进入工作空间目录并编译" class="headerlink" title="6. 进入工作空间目录并编译"></a>6. 进入工作空间目录并编译</h3><pre class="line-numbers language-none"><code class="language-none">cd 自定义空间名称catkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-启动并执行程序"><a href="#7-启动并执行程序" class="headerlink" title="7. 启动并执行程序"></a>7. 启动并执行程序</h3><p>​先启动roscore，这个是启动ros工作环境必须要执行的，值得注意的是该命令可以在任何路径执行，不会对后续命令产生负面影响。</p><pre class="line-numbers language-none"><code class="language-none">roscore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​再启动python文件，python文件的启动方式有两种，第一种是按照常规的python文件启动方式进行，当前理解是此种方式只是针对ros工作空间只有python文件进行通信等场景中，当同时涉及cpp文件与python文件时，不能采用第一种方式启动。</p><p>​<strong>第一种启动方式</strong></p><pre class="line-numbers language-none"><code class="language-none">python 文件路径&#x2F;自定义文件名.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​<strong>第二种启动方式</strong></p><pre class="line-numbers language-none"><code class="language-none">cd 工作空间source .&#x2F;devel&#x2F;setup.bashrosrun 包名 自定义文件名.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​如上所诉，第二种启动方式可以应对同时含有cpp文件与python文件的工作场景，命令行中的source的目的是配置环境变量，缺少该命令将导致程序找不到对应需要的配置。</p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS文件系统相关命令</title>
      <link href="/2023/03/09/ros-wen-jian-xi-tong-xiang-guan-ming-ling/"/>
      <url>/2023/03/09/ros-wen-jian-xi-tong-xiang-guan-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="1-ROS文件系统相关命令"><a href="#1-ROS文件系统相关命令" class="headerlink" title="1. ROS文件系统相关命令"></a>1. ROS文件系统相关命令</h3><p>​ROS 的文件系统本质上都还是操作系统文件，我们可以使用Linux命令来操作这些文件，不过，在ROS中为了更好的用户体验，ROS专门提供了一些类似于Linux的命令，这些命令较之于Linux原生命令，更为简介、高效。文件操作，无外乎就是增删改查与执行等操作，接下来，我们就从这五个维度，来介绍ROS文件系统的一些常用命令。</p><h4 id="1-1-增"><a href="#1-1-增" class="headerlink" title="1.1 增"></a>1.1 增</h4><p>​catkin_create_pkg 自定义包名 依赖包 &#x3D;&#x3D;&#x3D; 创建新的ROS功能包</p><p>​sudo apt install xxx &#x3D;&#x3D;&#x3D; 安装 ROS功能包</p><h4 id="1-2-删"><a href="#1-2-删" class="headerlink" title="1.2 删"></a>1.2 删</h4><p>​sudo apt purge xxx &#x3D;&#x3D;&#x3D;&#x3D; 删除某个功能包</p><h4 id="1-3-查"><a href="#1-3-查" class="headerlink" title="1.3 查"></a>1.3 查</h4><p>​rospack list &#x3D;&#x3D;&#x3D; 列出所有功能包</p><p>​rospack find 包名 &#x3D;&#x3D;&#x3D; 查找某个功能包是否存在，如果存在返回安装路径</p><p>​roscd 包名 &#x3D;&#x3D;&#x3D; 进入某个功能包</p><p>​rosls 包名 &#x3D;&#x3D;&#x3D; 列出某个包下的文件</p><p>​apt search xxx &#x3D;&#x3D;&#x3D; 搜索某个功能包</p><h4 id="1-4-改"><a href="#1-4-改" class="headerlink" title="1.4 改"></a>1.4 改</h4><p>​rosed 包名 文件名 &#x3D;&#x3D;&#x3D; 修改功能包文件</p><p>​需要安装 vim</p><p>​**比如:**rosed turtlesim Color.msg</p><h4 id="1-5-执行"><a href="#1-5-执行" class="headerlink" title="1.5 执行"></a>1.5 执行</h4><h5 id="1-5-1-roscore"><a href="#1-5-1-roscore" class="headerlink" title="1.5.1 roscore"></a>1.5.1 roscore</h5><p>​<strong>roscore &#x3D;&#x3D;&#x3D;</strong> 是 ROS 的系统先决条件节点和程序的集合， 必须运行 roscore 才能使 ROS 节点进行通信。</p><p>​roscore 将启动:</p><ul><li><p>ros master</p></li><li><p>ros 参数服务器</p></li><li><p>rosout日志节点</p></li></ul><p>​用法：</p><pre class="line-numbers language-none"><code class="language-none">roscore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​或(指定端口号)</p><pre class="line-numbers language-none"><code class="language-none">roscore -p xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-5-2-rosrun"><a href="#1-5-2-rosrun" class="headerlink" title="1.5.2 rosrun"></a>1.5.2 rosrun</h5><p>​<strong>rosrun 包名 可执行文件名</strong> &#x3D;&#x3D;&#x3D; 运行指定的ROS节点</p><p>​<strong>比如:</strong><code>rosrun turtlesim turtlesim_node</code></p><h5 id="1-5-3-roslaunch"><a href="#1-5-3-roslaunch" class="headerlink" title="1.5.3 roslaunch"></a>1.5.3 roslaunch</h5><p>​<strong>roslaunch 包名 launch文件名</strong> &#x3D;&#x3D;&#x3D; 执行某个包下的 launch 文件</p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS文件系统</title>
      <link href="/2023/03/09/ros-wen-jian-xi-tong/"/>
      <url>/2023/03/09/ros-wen-jian-xi-tong/</url>
      
        <content type="html"><![CDATA[<h3 id="1-ROS文件系统"><a href="#1-ROS文件系统" class="headerlink" title="1.ROS文件系统"></a>1.ROS文件系统</h3><p>​ROS文件系统级指的是在硬盘上ROS源代码的组织形式，其结构大致可以如下图所示：</p><p><img src="/./images/ROS%E6%9E%B6%E6%9E%84/0.png"></p><pre class="line-numbers language-none"><code class="language-none">WorkSpace --- 自定义的工作空间    |--- build:编译空间，用于存放CMake和catkin的缓存信息、配置信息和其他中间文件。    |--- devel:开发空间，用于存放编译后生成的目标文件，包括头文件、动态&amp;静态链接库、可执行文件等。    |--- src: 源码        |-- package：功能包(ROS基本单元)包含多个节点、库与配置文件，包名所有字母小写，只能由字母、数字与下划线组成            |-- CMakeLists.txt 配置编译规则，比如源文件、依赖项、目标文件            |-- package.xml 包信息，比如:包名、版本、作者、依赖项...(以前版本是 manifest.xml)            |-- scripts 存储python文件            |-- src 存储C++源文件            |-- include 头文件            |-- msg 消息通信格式文件            |-- srv 服务通信格式文件            |-- action 动作格式文件            |-- launch 可一次性运行多个节点             |-- config 配置信息        |-- CMakeLists.txt: 编译的基本配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​ROS 文件系统中部分目录和文件前面编程中已经有所涉及，比如功能包的创建、src目录下cpp文件的编写、scripts目录下python文件的编写、launch目录下launch文件的编写，并且也配置了 package.xml 与 CMakeLists.txt 文件。其他目录下的内容后面教程将会再行介绍，当前我们主要介绍: package.xml 与 CMakeLists.txt 这两个配置文件。</p><h4 id="1-1package-xml"><a href="#1-1package-xml" class="headerlink" title="1.1package.xml"></a>1.1package.xml</h4><p>​该文件定义有关软件包的属性，例如软件包名称，版本号，作者，维护者以及对其他catkin软件包的依赖性。请注意，该概念类似于旧版 rosbuild 构建系统中使用的<em>manifest.xml</em>文件。</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!-- 格式: 以前是 1，推荐使用格式 2 --&gt;&lt;package format&#x3D;&quot;2&quot;&gt;  &lt;!-- 包名 --&gt;  &lt;name&gt;demo01_hello_vscode&lt;&#x2F;name&gt;  &lt;!-- 版本 --&gt;  &lt;version&gt;0.0.0&lt;&#x2F;version&gt;  &lt;!-- 描述信息 --&gt;  &lt;description&gt;The demo01_hello_vscode package&lt;&#x2F;description&gt;  &lt;!-- One maintainer tag required, multiple allowed, one person per tag --&gt;  &lt;!-- Example:  --&gt;  &lt;!-- &lt;maintainer email&#x3D;&quot;jane.doe@example.com&quot;&gt;Jane Doe&lt;&#x2F;maintainer&gt; --&gt;  &lt;!-- 维护人员 --&gt;  &lt;maintainer email&#x3D;&quot;xuzuo@todo.todo&quot;&gt;xuzuo&lt;&#x2F;maintainer&gt;  &lt;!-- One license tag required, multiple allowed, one license per tag --&gt;  &lt;!-- Commonly used license strings: --&gt;  &lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --&gt;  &lt;!-- 许可证信息，ROS核心组件默认 BSD --&gt;  &lt;license&gt;TODO&lt;&#x2F;license&gt;  &lt;!-- Url tags are optional, but multiple are allowed, one per tag --&gt;  &lt;!-- Optional attribute type can be: website, bugtracker, or repository --&gt;  &lt;!-- Example: --&gt;  &lt;!-- &lt;url type&#x3D;&quot;website&quot;&gt;http:&#x2F;&#x2F;wiki.ros.org&#x2F;demo01_hello_vscode&lt;&#x2F;url&gt; --&gt;  &lt;!-- Author tags are optional, multiple are allowed, one per tag --&gt;  &lt;!-- Authors do not have to be maintainers, but could be --&gt;  &lt;!-- Example: --&gt;  &lt;!-- &lt;author email&#x3D;&quot;jane.doe@example.com&quot;&gt;Jane Doe&lt;&#x2F;author&gt; --&gt;  &lt;!-- The *depend tags are used to specify dependencies --&gt;  &lt;!-- Dependencies can be catkin packages or system dependencies --&gt;  &lt;!-- Examples: --&gt;  &lt;!-- Use depend as a shortcut for packages that are both build and exec dependencies --&gt;  &lt;!--   &lt;depend&gt;roscpp&lt;&#x2F;depend&gt; --&gt;  &lt;!--   Note that this is equivalent to the following: --&gt;  &lt;!--   &lt;build_depend&gt;roscpp&lt;&#x2F;build_depend&gt; --&gt;  &lt;!--   &lt;exec_depend&gt;roscpp&lt;&#x2F;exec_depend&gt; --&gt;  &lt;!-- Use build_depend for packages you need at compile time: --&gt;  &lt;!--   &lt;build_depend&gt;message_generation&lt;&#x2F;build_depend&gt; --&gt;  &lt;!-- Use build_export_depend for packages you need in order to build against this package: --&gt;  &lt;!--   &lt;build_export_depend&gt;message_generation&lt;&#x2F;build_export_depend&gt; --&gt;  &lt;!-- Use buildtool_depend for build tool packages: --&gt;  &lt;!--   &lt;buildtool_depend&gt;catkin&lt;&#x2F;buildtool_depend&gt; --&gt;  &lt;!-- Use exec_depend for packages you need at runtime: --&gt;  &lt;!--   &lt;exec_depend&gt;message_runtime&lt;&#x2F;exec_depend&gt; --&gt;  &lt;!-- Use test_depend for packages you need only for testing: --&gt;  &lt;!--   &lt;test_depend&gt;gtest&lt;&#x2F;test_depend&gt; --&gt;  &lt;!-- Use doc_depend for packages you need only for building documentation: --&gt;  &lt;!--   &lt;doc_depend&gt;doxygen&lt;&#x2F;doc_depend&gt; --&gt;  &lt;!-- 依赖的构建工具，这是必须的 --&gt;  &lt;buildtool_depend&gt;catkin&lt;&#x2F;buildtool_depend&gt;  &lt;!-- 指定构建此软件包所需的软件包 --&gt;  &lt;build_depend&gt;roscpp&lt;&#x2F;build_depend&gt;  &lt;build_depend&gt;rospy&lt;&#x2F;build_depend&gt;  &lt;build_depend&gt;std_msgs&lt;&#x2F;build_depend&gt;  &lt;!-- 指定根据这个包构建库所需要的包 --&gt;  &lt;build_export_depend&gt;roscpp&lt;&#x2F;build_export_depend&gt;  &lt;build_export_depend&gt;rospy&lt;&#x2F;build_export_depend&gt;  &lt;build_export_depend&gt;std_msgs&lt;&#x2F;build_export_depend&gt;  &lt;!-- 运行该程序包中的代码所需的程序包 --&gt;    &lt;exec_depend&gt;roscpp&lt;&#x2F;exec_depend&gt;  &lt;exec_depend&gt;rospy&lt;&#x2F;exec_depend&gt;  &lt;exec_depend&gt;std_msgs&lt;&#x2F;exec_depend&gt;  &lt;!-- The export tag contains other, unspecified, tags --&gt;  &lt;export&gt;    &lt;!-- Other tools can request additional information be placed here --&gt;  &lt;&#x2F;export&gt;&lt;&#x2F;package&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2CMakelists-txt"><a href="#1-2CMakelists-txt" class="headerlink" title="1.2CMakelists.txt"></a>1.2CMakelists.txt</h4><p>​文件<strong>CMakeLists.txt</strong>是CMake构建系统的输入，用于构建软件包。任何兼容CMake的软件包都包含一个或多个CMakeLists.txt文件，这些文件描述了如何构建代码以及将代码安装到何处。</p><pre class="line-numbers language-none"><code class="language-none">cmake_minimum_required(VERSION 3.0.2) #所需 cmake 版本project(demo01_hello_vscode) #包名称，会被 $&#123;PROJECT_NAME&#125; 的方式调用## Compile as C++11, supported in ROS Kinetic and newer# add_compile_options(-std&#x3D;c++11)## Find catkin macros and libraries## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)## is used, also find other catkin packages#设置构建所需要的软件包find_package(catkin REQUIRED COMPONENTS  roscpp  rospy  std_msgs)## System dependencies are found with CMake&#39;s conventions#默认添加系统依赖# find_package(Boost REQUIRED COMPONENTS system)## Uncomment this if the package has a setup.py. This macro ensures## modules and global scripts declared therein get installed## See http:&#x2F;&#x2F;ros.org&#x2F;doc&#x2F;api&#x2F;catkin&#x2F;html&#x2F;user_guide&#x2F;setup_dot_py.html# 启动 python 模块支持# catkin_python_setup()################################################## Declare ROS messages, services and actions #### 声明 ROS 消息、服务、动作... #################################################### To declare and build messages, services or actions from within this## package, follow these steps:## * Let MSG_DEP_SET be the set of packages whose message types you use in##   your messages&#x2F;services&#x2F;actions (e.g. std_msgs, actionlib_msgs, ...).## * In the file package.xml:##   * add a build_depend tag for &quot;message_generation&quot;##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET##   * If MSG_DEP_SET isn&#39;t empty the following dependency has been pulled in##     but can be declared for certainty nonetheless:##     * add a exec_depend tag for &quot;message_runtime&quot;## * In this file (CMakeLists.txt):##   * add &quot;message_generation&quot; and every package in MSG_DEP_SET to##     find_package(catkin REQUIRED COMPONENTS ...)##   * add &quot;message_runtime&quot; and every package in MSG_DEP_SET to##     catkin_package(CATKIN_DEPENDS ...)##   * uncomment the add_*_files sections below as needed##     and list every .msg&#x2F;.srv&#x2F;.action file to be processed##   * uncomment the generate_messages entry below##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)## Generate messages in the &#39;msg&#39; folder# add_message_files(#   FILES#   Message1.msg#   Message2.msg# )## Generate services in the &#39;srv&#39; folder# add_service_files(#   FILES#   Service1.srv#   Service2.srv# )## Generate actions in the &#39;action&#39; folder# add_action_files(#   FILES#   Action1.action#   Action2.action# )## Generate added messages and services with any dependencies listed here# 生成消息、服务时的依赖包# generate_messages(#   DEPENDENCIES#   std_msgs# )################################################## Declare ROS dynamic reconfigure parameters #### 声明 ROS 动态参数配置 #################################################### To declare and build dynamic reconfigure parameters within this## package, follow these steps:## * In the file package.xml:##   * add a build_depend and a exec_depend tag for &quot;dynamic_reconfigure&quot;## * In this file (CMakeLists.txt):##   * add &quot;dynamic_reconfigure&quot; to##     find_package(catkin REQUIRED COMPONENTS ...)##   * uncomment the &quot;generate_dynamic_reconfigure_options&quot; section below##     and list every .cfg file to be processed## Generate dynamic reconfigure parameters in the &#39;cfg&#39; folder# generate_dynamic_reconfigure_options(#   cfg&#x2F;DynReconf1.cfg#   cfg&#x2F;DynReconf2.cfg# )##################################### catkin specific configuration #### catkin 特定配置####################################### The catkin_package macro generates cmake config files for your package## Declare things to be passed to dependent projects## INCLUDE_DIRS: uncomment this if your package contains header files## LIBRARIES: libraries you create in this project that dependent projects also need## CATKIN_DEPENDS: catkin_packages dependent projects also need## DEPENDS: system dependencies of this project that dependent projects also need# 运行时依赖catkin_package(#  INCLUDE_DIRS include#  LIBRARIES demo01_hello_vscode#  CATKIN_DEPENDS roscpp rospy std_msgs#  DEPENDS system_lib)############# Build ############### Specify additional locations of header files## Your package locations should be listed before other locations# 添加头文件路径，当前程序包的头文件路径位于其他文件路径之前include_directories(# include  $&#123;catkin_INCLUDE_DIRS&#125;)## Declare a C++ library# 声明 C++ 库# add_library($&#123;PROJECT_NAME&#125;#   src&#x2F;$&#123;PROJECT_NAME&#125;&#x2F;demo01_hello_vscode.cpp# )## Add cmake target dependencies of the library## as an example, code may need to be generated before libraries## either from message generation or dynamic reconfigure# 添加库的 cmake 目标依赖# add_dependencies($&#123;PROJECT_NAME&#125; $&#123;$&#123;PROJECT_NAME&#125;_EXPORTED_TARGETS&#125; $&#123;catkin_EXPORTED_TARGETS&#125;)## Declare a C++ executable## With catkin_make all packages are built within a single CMake context## The recommended prefix ensures that target names across packages don&#39;t collide# 声明 C++ 可执行文件add_executable(Hello_VSCode src&#x2F;Hello_VSCode.cpp)## Rename C++ executable without prefix## The above recommended prefix causes long target names, the following renames the## target back to the shorter version for ease of user use## e.g. &quot;rosrun someones_pkg node&quot; instead of &quot;rosrun someones_pkg someones_pkg_node&quot;#重命名c++可执行文件# set_target_properties($&#123;PROJECT_NAME&#125;_node PROPERTIES OUTPUT_NAME node PREFIX &quot;&quot;)## Add cmake target dependencies of the executable## same as for the library above#添加可执行文件的 cmake 目标依赖add_dependencies(Hello_VSCode $&#123;$&#123;PROJECT_NAME&#125;_EXPORTED_TARGETS&#125; $&#123;catkin_EXPORTED_TARGETS&#125;)## Specify libraries to link a library or executable target against#指定库、可执行文件的链接库target_link_libraries(Hello_VSCode  $&#123;catkin_LIBRARIES&#125;)############### Install #### 安装 ################ all install targets should use catkin DESTINATION variables# See http:&#x2F;&#x2F;ros.org&#x2F;doc&#x2F;api&#x2F;catkin&#x2F;html&#x2F;adv_user_guide&#x2F;variables.html## Mark executable scripts (Python etc.) for installation## in contrast to setup.py, you can choose the destination#设置用于安装的可执行脚本catkin_install_python(PROGRAMS  scripts&#x2F;Hi.py  DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;)## Mark executables for installation## See http:&#x2F;&#x2F;docs.ros.org&#x2F;melodic&#x2F;api&#x2F;catkin&#x2F;html&#x2F;howto&#x2F;format1&#x2F;building_executables.html# install(TARGETS $&#123;PROJECT_NAME&#125;_node#   RUNTIME DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;# )## Mark libraries for installation## See http:&#x2F;&#x2F;docs.ros.org&#x2F;melodic&#x2F;api&#x2F;catkin&#x2F;html&#x2F;howto&#x2F;format1&#x2F;building_libraries.html# install(TARGETS $&#123;PROJECT_NAME&#125;#   ARCHIVE DESTINATION $&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;#   LIBRARY DESTINATION $&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;#   RUNTIME DESTINATION $&#123;CATKIN_GLOBAL_BIN_DESTINATION&#125;# )## Mark cpp header files for installation# install(DIRECTORY include&#x2F;$&#123;PROJECT_NAME&#125;&#x2F;#   DESTINATION $&#123;CATKIN_PACKAGE_INCLUDE_DESTINATION&#125;#   FILES_MATCHING PATTERN &quot;*.h&quot;#   PATTERN &quot;.svn&quot; EXCLUDE# )## Mark other files for installation (e.g. launch and bag files, etc.)# install(FILES#   # myfile1#   # myfile2#   DESTINATION $&#123;CATKIN_PACKAGE_SHARE_DESTINATION&#125;# )############### Testing ################# Add gtest based cpp test target and link libraries# catkin_add_gtest($&#123;PROJECT_NAME&#125;-test test&#x2F;test_demo01_hello_vscode.cpp)# if(TARGET $&#123;PROJECT_NAME&#125;-test)#   target_link_libraries($&#123;PROJECT_NAME&#125;-test $&#123;PROJECT_NAME&#125;)# endif()## Add folders to be run by python nosetests# catkin_add_nosetests(test)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MMDetection入门教程</title>
      <link href="/2023/03/08/mmdetection-ru-men-jiao-cheng/"/>
      <url>/2023/03/08/mmdetection-ru-men-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p><img src="/./images/MMdetection%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/0.png"></p><p>​网上MMDetection教程很多，但是都不成系统，比较杂乱，看完一圈下来都还不知道MMDetection怎么使用。这里总结推荐几个比较有用的学习教程。</p><blockquote><ul><li><strong>官方经验参考</strong></li><li><a href="https://mmcv.readthedocs.io/en/latest/understand_mmcv/config.html">官方教程-MMCV</a></li><li><a href="https://mmdetection.readthedocs.io/en/v2.17.0/tutorials/config.html">官方教程-MMDetection</a></li><li><a href="https://zhuanlan.zhihu.com/p/369826931">官方教程 - 不得不知的 MMDetection 学习路线(个人经验版)</a></li><li><a href="https://www.bilibili.com/video/BV1Jb4y1r7ir?spm_id_from=333.999.0.0">西安交大课件 - mmdetection教程(使用篇)</a></li><li><strong>个人经验参考</strong></li><li><a href="https://blog.csdn.net/qq_16137569/article/details/120924726?spm=1001.2014.3001.5501">MMDetection框架入门教程（一）：Anaconda3下的安装教程（mmdet+mmdet3d）</a></li><li><a href="https://blog.csdn.net/qq_16137569/article/details/120929852?spm=1001.2014.3001.5501">MMDetection框架入门教程（二）：快速上手教程</a></li><li><a href="https://blog.csdn.net/qq_16137569/article/details/121188974?spm=1001.2014.3001.5501">MMDetection框架入门教程（三）：配置文件详细解析</a></li><li><a href="https://blog.csdn.net/qq_16137569/article/details/121216363?spm=1001.2014.3001.5501">MMDetection框架入门教程（四）：注册机制详解</a></li><li><a href="https://blog.csdn.net/qq_16137569/article/details/121195529">MMDetection框架入门教程（五）：Runner和Hook详细解析</a></li></ul></blockquote><h3 id="1-框架概述"><a href="#1-框架概述" class="headerlink" title="1.框架概述"></a>1.框架概述</h3><h4 id="1-1Pytorch"><a href="#1-1Pytorch" class="headerlink" title="1.1Pytorch"></a>1.1Pytorch</h4><p>​如果使用Pytorch框架构建一个算法，通常实现的步骤如下：</p><ul><li><strong>构建数据集</strong>：新建一个类，并继承<code>Dataset</code>类，重写<code>__getitem__()</code>方法实现数据和标签的加载和遍历功能，并以pipeline的方式定义数据预处理流程</li><li><strong>构建数据加载器</strong>：传入相应的参数实例化DataLoader</li><li><strong>构建模型</strong>：新建一个类，并继承<code>Module</code>类，重写<code>forward()</code>函数定义模型的前向过程</li><li><strong>定义损失函数和优化器</strong>：根据算法选择合适和损失函数和优化器</li><li><strong>训练和验证</strong>：循环从DataLoader中获取数据和标签，送入网络模型，计算loss，根据反传的梯度使用优化器进行迭代优化</li><li><strong>其他操作</strong>：在主调函数里可以任意穿插训练Tricks、日志打印、检查点保存等操作</li></ul><h4 id="2-1MMDetection"><a href="#2-1MMDetection" class="headerlink" title="2.1MMDetection"></a>2.1MMDetection</h4><p>​如果使用MMDetection构建一个算法，通常的实现步骤如下：</p><ul><li><strong>注册数据集</strong>：<code>CustomDataset</code>是MMDetection在原始的<code>Dataset</code>基础上的再次封装，其<code>__getitem__()</code>方法会根据训练和测试模式分别重定向到<code>prepare_train_img()</code>和<code>prepare_test_img()</code>函数。用户以继承<code>CustomDataset</code>类的方式构建自己的数据集时，需要重写<code>load_annotations()</code>和<code>get_ann_info()</code>函数，定义数据和标签的加载及遍历方式。完成数据集类的定义后，还需要使用<code>DATASETS.register_module()</code>进行模块注册。</li><li><strong>注册模型</strong>：模型构建的方式和Pytorch类似，都是新建一个<code>Module</code>的子类然后重写<code>forward()</code>函数。唯一的区别在于MMDetection中需要继承<code>BaseModule</code>而不是<code>Module</code>，<code>BaseModule</code>是<code>Module</code>的子类，MMLab中的任何模型都必须继承此类。另外，MMDetection将一个完整的模型拆分为backbone、neck和head三部分进行管理，所以用户需要按照这种方式，将算法模型拆解成3个类，分别使用<code>BACKBONES.register_module()</code>、<code>NECKS.register_module()</code>和<code>HEADS.register_module()</code>完成模块注册。</li><li><strong>构建配置文件</strong>：配置文件用于配置算法各个组件的运行参数，大体上可以包含四个部分：datasets、models、schedules和runtime。完成相应模块的定义和注册后，在配置文件中配置好相应的运行参数，然后MMDetection就会通过<code>Registry</code>类读取并解析配置文件，完成模块的实例化。另外，配置文件可以通过<code>_base_</code>字段实现继承功能，以提高代码复用率。</li><li><strong>训练和验证</strong>：在完成各模块的代码实现、模块的注册、配置文件的编写后，就可以使用<code>./tools/train.py</code>和<code>./tools/test.py</code>对模型进行训练和验证，不需要用户编写额外的代码。</li></ul><h4 id="1-3流程对比"><a href="#1-3流程对比" class="headerlink" title="1.3流程对比"></a>1.3流程对比</h4><p><img src="/./images/MMdetection%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/1.png"></p><h3 id="2-算法的实现流程"><a href="#2-算法的实现流程" class="headerlink" title="2.算法的实现流程"></a>2.算法的实现流程</h3><h4 id="2-1注册数据集"><a href="#2-1注册数据集" class="headerlink" title="2.1注册数据集"></a>2.1注册数据集</h4><p>​定义自己的数据集时，需要新写一个继承<code>CustomDataset</code>的Dataset类，然后重写<code>load_annotations()</code>函数和<code>get_ann_info()</code>函数。官方文档上说，用户如果要使用<code>CustomDataset</code>，要将现有数据集转换成MMDetection兼容的格式(COCO格式或中间格式) 。但是仔细研究发现底层的代码并没有发现有这个限制，只要你的数据格式能和你实现的<code>load_annotations()</code>和<code>get_ann_info()</code>对应上即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""中间数据格式：[    &#123;        'filename': 'a.jpg',# 图片路径        'width': 1280,# 图片尺寸        'height': 720,        'ann': &#123;# 标注信息            'bboxes': &lt;np.ndarray, float32> (n, 4),# 标注框坐标(x1, y1, x2, y2)            'labels': &lt;np.ndarray, int64> (n, ),# 标注框类别            'bboxes_ignore': &lt;np.ndarray, float32> (k, 4),# 不关注的标注框坐标(可选)            'labels_ignore': &lt;np.ndarray, int64> (k, ) # 不关注的标注框类别(可选)        &#125;    &#125;,    ...]"""</span><span class="token keyword">class</span> <span class="token class-name">CustomDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    CLASSES <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 ann_file<span class="token punctuation">,</span><span class="token comment"># 文件路径</span>                 pipeline<span class="token punctuation">,</span><span class="token comment"># 数据预处理pipeline</span>                 classes<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token comment"># 检测类别</span>                 data_root<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token comment"># 文件根路径</span>                 img_prefix<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                 seg_prefix<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 proposal_file<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 test_mode<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token comment"># 为True的话将不会加载标注信息</span>                 filter_empty_gt<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 为True的话将会过滤没有标注框的图像(只在test_mode=False的条件下有效)</span>        self<span class="token punctuation">.</span>ann_file <span class="token operator">=</span> ann_file        self<span class="token punctuation">.</span>data_root <span class="token operator">=</span> data_root        self<span class="token punctuation">.</span>img_prefix <span class="token operator">=</span> img_prefix        self<span class="token punctuation">.</span>seg_prefix <span class="token operator">=</span> seg_prefix        self<span class="token punctuation">.</span>proposal_file <span class="token operator">=</span> proposal_file        self<span class="token punctuation">.</span>test_mode <span class="token operator">=</span> test_mode        self<span class="token punctuation">.</span>filter_empty_gt <span class="token operator">=</span> filter_empty_gt        self<span class="token punctuation">.</span>CLASSES <span class="token operator">=</span> self<span class="token punctuation">.</span>get_classes<span class="token punctuation">(</span>classes<span class="token punctuation">)</span>                <span class="token comment"># 调用load_annotations函数加载样本和标签</span>        self<span class="token punctuation">.</span>data_infos <span class="token operator">=</span> self<span class="token punctuation">.</span>load_annotations<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ann_file<span class="token punctuation">)</span>        <span class="token comment"># 用户可以通过重写_filter_imgs()函数在训练过程中实现自定义的样本过滤功能</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> test_mode<span class="token punctuation">:</span>            valid_inds <span class="token operator">=</span> self<span class="token punctuation">.</span>_filter_imgs<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>data_infos <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>data_infos<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> valid_inds<span class="token punctuation">]</span>        <span class="token comment"># 根据pipeline对样本进行预处理</span>        self<span class="token punctuation">.</span>pipeline <span class="token operator">=</span> Compose<span class="token punctuation">(</span>pipeline<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​在Pytorch中<code>Dataset</code>的遍历是通过重写<code>__getitem__()</code>函数实现的，但MMDetection的<code>CustomDataset</code>虽然是<code>Dataset</code>的子类，却没有要求我们重写<code>__getitem__()</code>函数，原因是为了方便训练模式和测试模式下的数据管理，MMDetection已经重写了<code>__getitem__()</code>函数，可以根据当前运行模式调用<code>prepare_train_img()</code>或<code>prepare_test_img()</code>，两者的区别在于是否加载训练标签。所以我们只需要重写<code>load_annotations()</code>和<code>get_ann_info()</code>函数，剩下的部分交给MMDetection就可以了。完成自定义的Dataset类后别忘记加上<code>@DATASETS.register_module()</code>将当前模块注册到DATASETS表中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>test_mode<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>prepare_test_img<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>prepare_train_img<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token comment"># 返回预处理后的训练样本及标签        </span><span class="token keyword">def</span> <span class="token function">prepare_train_img</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    img_info <span class="token operator">=</span> self<span class="token punctuation">.</span>data_infos<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>    <span class="token comment"># 调用get_ann_info获取训练标签</span>    ann_info <span class="token operator">=</span> self<span class="token punctuation">.</span>get_ann_info<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>    results <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>img_info<span class="token operator">=</span>img_info<span class="token punctuation">,</span> ann_info<span class="token operator">=</span>ann_info<span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token comment"># 返回预处理后的测试样本</span><span class="token keyword">def</span> <span class="token function">prepare_test_img</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    img_info <span class="token operator">=</span> self<span class="token punctuation">.</span>data_infos<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>    results <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>img_info<span class="token operator">=</span>img_info<span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2注册模型"><a href="#2-2注册模型" class="headerlink" title="2.2注册模型"></a>2.2注册模型</h4><p>​网络模型的定义比较简单，相比Pytorch只有两个区别：①继承的父类从<code>Module</code>变成了<code>BaseModule</code>；②需要按照backbone、neck和head的结构将模型拆解成3个部分，分别定义并注册到<code>BACKBONES</code>、<code>NECKS</code>以及<code>HEADS</code>当中。</p><h4 id="2-3构建配置文件"><a href="#2-3构建配置文件" class="headerlink" title="2.3构建配置文件"></a>2.3构建配置文件</h4><h5 id="2-3-1配置文件的构成"><a href="#2-3-1配置文件的构成" class="headerlink" title="2.3.1配置文件的构成"></a>2.3.1配置文件的构成</h5><p>​配置文件是由一系列变量定义组成的文本文件，其中<code>dict</code>类型的变量表示一个个的模块，<code>dict</code>变量必须包含<code>type</code>字段，表示模块名称，<strong>其它字段则和模块构造函数的参数一一对应</strong>，届时用于该模块的初始化（见第本文3章的<code>build_from_cfg()</code>函数）。该模块必须是已经注册的，否则后续MMDetection无法根据<code>type</code>值找到对应的模块。配置文件除了<code>dict</code>类型的变量以外，还可以是其他任意类型，一般是辅助<code>dict</code>变量定义的中间变量，比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">test_pipeline <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'LoadMultiViewImageFromFiles'</span><span class="token punctuation">,</span> to_float32<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'NormalizeMultiviewImage'</span><span class="token punctuation">,</span> <span class="token operator">**</span>img_norm_cfg<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'PadMultiViewImage'</span><span class="token punctuation">,</span> size_divisor<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span>evaluation <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>interval<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> pipeline<span class="token operator">=</span>test_pipeline<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​配置文件也支持继承操作，通过<code>_base_</code>变量来实现。<code>_base_</code>是一个<code>list</code>类型变量，里面存储的是要继承的配置文件的路径。在解析配置文件的时候，文件解析器以递归的方式(其他配置文件也可能包含<code>_base_</code>变量)解析所有配置文件。任何配置文件往上追溯都会继承以下四个文件，分别对应数据集(datasets)、模型(models)、训练策略(schedules)和运行时的默认配置(default_runtime)：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">_base_ <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'mmdetection/configs/_base_/models/fast_rcnn_r50_fpn.py'</span><span class="token punctuation">,</span><span class="token comment"># models</span>    <span class="token string">'mmdetection/configs/_base_/datasets/coco_detection.py'</span><span class="token punctuation">,</span><span class="token comment"># datasets</span>    <span class="token string">'mmdetection/configs/_base_/schedules/schedule_1x.py'</span><span class="token punctuation">,</span><span class="token comment"># schedules</span>    <span class="token string">'mmdetection/configs/_base_/default_runtime.py'</span><span class="token punctuation">,</span><span class="token comment"># defualt_runtime</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​如果你对上面继承这4个基础配置文件的配置文件进行打印，可以看到如下内容，这也是<strong>任何一个完整配置文件都应该包含的配置信息</strong>。当然，你也可以任意增加自定义的配置信息。所以我们平常新建一个配置文件的时候，一般都是继承这4个基础配置文件，然后在此基础上进行针对性调整。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 模型配置(models) =========================================</span>model <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'FastRCNN'</span><span class="token punctuation">,</span><span class="token comment"># 模型名称是FastRCNN</span>backbone<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token comment"># BackBone是ResNet</span>        <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'ResNet'</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    neck<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token comment"># Neck是FPN</span>        <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'FPN'</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    roi_head<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token comment"># Head是StandardRoIHead</span>        <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'StandardRoIHead'</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>        loss_cls<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment"># 分类损失函数</span>        loss_bbox<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment"># 回归损失函数</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    train_cfg<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token comment"># 训练参数配置</span>    assigner<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment"># BBox Assigner</span>    sampler<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment"># BBox Sampler</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    test_cfg <span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token comment"># 测试参数配置</span>    nms<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment"># NMS后处理</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2. 数据集配置(datasets) =========================================</span>dataset_type <span class="token operator">=</span> <span class="token string">'...'</span><span class="token comment"># 数据集名称</span>data_root <span class="token operator">=</span> <span class="token string">'...'</span><span class="token comment"># 数据集根目录</span>img_norm_cfg <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment"># 图像归一化参数</span>train_pipeline <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment"># 训练数据处理Pipeline</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">]</span>test_pipeline <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token comment"># 测试数据处理Pipeline</span>data <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>samples_per_gpu<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment"># batch_size</span>    workers_per_gpu<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment"># GPU数量</span>train<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token comment"># 训练集配置</span><span class="token builtin">type</span><span class="token operator">=</span>dataset_type<span class="token punctuation">,</span>        ann_file<span class="token operator">=</span>data_root <span class="token operator">+</span> <span class="token string">'annotations/instances_train2017.json'</span><span class="token punctuation">,</span><span class="token comment"># 标注问加你</span>        img_prefix<span class="token operator">=</span>data_root <span class="token operator">+</span> <span class="token string">'train2017/'</span><span class="token punctuation">,</span><span class="token comment"># 图像前缀</span>pipline<span class="token operator">=</span>trian_pipline<span class="token punctuation">,</span><span class="token comment"># 数据预处理pipeline</span><span class="token punctuation">)</span><span class="token punctuation">,</span>val<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token comment"># 验证集配置</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>pipline<span class="token operator">=</span>test_pipline<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>test<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token comment"># 测试集配置</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>pipline<span class="token operator">=</span>test_pipline<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 3. 训练策略配置(schedules) =========================================</span>evaluation <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>interval<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> metric<span class="token operator">=</span><span class="token string">'bbox'</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'SGD'</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">)</span>optimizer_config <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>grad_clip<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>lr_config <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>    policy<span class="token operator">=</span><span class="token string">'step'</span><span class="token punctuation">,</span>    warmup<span class="token operator">=</span><span class="token string">'linear'</span><span class="token punctuation">,</span>    warmup_iters<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span>    warmup_ratio<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span>    step<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>runner <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'EpochBasedRunner'</span><span class="token punctuation">,</span> max_epochs<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment"># 4. 运行配置(runtime) =========================================</span>checkpoint_config <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>interval<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>log_config <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>interval<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> hooks<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'TextLoggerHook'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>custom_hooks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'NumClassCheckHook'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>dist_params <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>backend<span class="token operator">=</span><span class="token string">'nccl'</span><span class="token punctuation">)</span>log_level <span class="token operator">=</span> <span class="token string">'INFO'</span>load_from <span class="token operator">=</span> <span class="token boolean">None</span>resume_from <span class="token operator">=</span> <span class="token boolean">None</span>workflow <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​另外还有一些可选的配置参数，比如<code>custom_imports</code>，用于导入用户自定义的模块，当配置文件解析器解析到该字段时，会调用<code>import_modules_from_strings()</code>函数将字段<code>imports</code>包含的模块导入到程序中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">custom_imports <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>imports<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'os.path'</span><span class="token punctuation">,</span> <span class="token string">'numpy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># list类型, 需要导入的模块名称</span>  allow_failed_imports<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 如果设为True, 导入失败时会返回None而不是报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-3-2配置文件的修改"><a href="#2-3-2配置文件的修改" class="headerlink" title="2.3.2配置文件的修改"></a>2.3.2配置文件的修改</h5><p>​修改配置文件时会遇到2种情况：①修改已有dict的某个参数：直接重写对应的参数；②需要删掉原有dict的所有参数，然后用一组全新的参数代替：增加<code>_delete_=True</code>字段以修改学习率和更换优化器为例解释这两种情况下应该怎么修改配置文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 从_base_中继承的原始优化器</span>optimizer <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'SGD'</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token comment"># 修改学习率</span>optimizer <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token comment"># 修改后optimizer变成</span>optimizer <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'SGD'</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token comment"># 将原来的SGD替换成AdamW</span>optimizer <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>_delete_<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'AdamW'</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">)</span>  <span class="token comment"># 替换后optimizer变成</span>optimizer <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'AdamW'</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-3配置文件的解析"><a href="#2-3-3配置文件的解析" class="headerlink" title="2.3.3配置文件的解析"></a>2.3.3配置文件的解析</h5><p>​解析配置文件其实是train.py和test.py要做的事，这里放到和构建配置文件一块讲了，逻辑上会更通畅一些。一般使用Config类来管理配置文件。使用<code>Config.fromfile(filename)</code>来读取配置文件（也可以直接传入一个dict），返回一个Config类实例cfg，然后可以通过<code>print(cfg.pretty_text)</code>的方式来打印配置文件信息，或者通过<code>cfg.dump(filepath)</code>来保存配置文件信息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> mmcv <span class="token keyword">import</span> Configcfg <span class="token operator">=</span> Config<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span><span class="token string">'../configs/test_config.py'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​<code>fromfile()</code>函数源码如下，其核心函数是<code>_file2dict()</code>。<code>_file2dict()</code>会根据文本顺序，按照key &#x3D; value的格式解析配置文件，得到一个名为<code>cfg_dict</code>的字典，如果存在<code>_base_</code>字段，还会对<code>_base_</code>包含的每个文件路径再调用一次<code>_file2dict()</code>函数，将文件中包含的配置参数加入到<code>cfg_dict</code>中，实现配置文件的<strong>继承</strong>功能。需要注意的是，<code>_file2dict()</code>内部会对<code>_base_</code>中不同文件包含的键值进行校验，<strong>不同基础配置文件中不允许出现重复的键值</strong>，否则Config不知道以哪个配置文件为准。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fromfile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>             use_predefined_variables<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>             import_custom_modules<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cfg_dict<span class="token punctuation">,</span> cfg_text <span class="token operator">=</span> Config<span class="token punctuation">.</span>_file2dict<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>                                           use_predefined_variables<span class="token punctuation">)</span>    <span class="token comment"># import_modules_from_strings()是根据字符串列表导入对应的模块</span>    <span class="token keyword">if</span> import_custom_modules <span class="token keyword">and</span> cfg_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'custom_imports'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        import_modules_from_strings<span class="token punctuation">(</span><span class="token operator">**</span>cfg_dict<span class="token punctuation">[</span><span class="token string">'custom_imports'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Config<span class="token punctuation">(</span>cfg_dict<span class="token punctuation">,</span> cfg_text<span class="token operator">=</span>cfg_text<span class="token punctuation">,</span> filename<span class="token operator">=</span>filename<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​另外有两点需要补充一下，其一是构造Config对象的时候，会将python的<code>dict</code>数据类型转换为<code>ConfigDict</code>类型进行处理。<code>ConfigDict</code>是第三方库addict中<code>Dict</code>的子类(<code>Dict</code>又是python<code>dict</code>的子类)，因为python原生的<code>dict</code>类型不支持<code>.属性</code>的访问方式，特别是<code>dict</code>内部嵌套了多层dict的时候，如果按照key的访问方式，代码写起来非常低效，而<code>Dict</code>类通过重写<code>__getattr__()</code>的方式实现了<code>.属性</code>的访问方式。所以继承了<code>Dict</code>的<code>ConfigDict</code>也支持使用<code>.属性</code>的方式访问字典中的各个成员值。其二，为了兼容配置文件名中出现小数点的情况，<code>_file2dict()</code>会在C盘下创建一个临时文件夹进行操作，如果C盘有访问权限设置，可能会出现报错，不过这个问题只会出现在Windows系统下。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> mmcv <span class="token keyword">import</span> ConfigDictmodel <span class="token operator">=</span> ConfigDict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>backbone<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'ResNet'</span><span class="token punctuation">,</span> depth<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>backbone<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token comment"># 输出 'ResNet'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4训练和测试"><a href="#2-4训练和测试" class="headerlink" title="2.4训练和测试"></a>2.4训练和测试</h4><p>​用MMDetection实现一个算法包含四个步骤，第一第二步注册数据集和模型的目的是构建基础模块（数据流和模型），第三步构建配置文件的目的是指定需要的模块以及模块的输入参数，接下来第四步就是根据配置文件把事先定义好的模块一个个拎出来，传入指定的输入参数，然后按照算法流程依次串起来。</p><h5 id="2-4-1train-py文件"><a href="#2-4-1train-py文件" class="headerlink" title="2.4.1train.py文件"></a>2.4.1train.py文件</h5><p>​我们先过一遍官方提供的<code>train.py</code>代码(我只保留了核心功能代码)，然后再介绍MMDetection是如何使用Runner和Hook来调度整个训练流程的，这样理解起来会更快一些。</p><p>​<code>train.py</code>的主调函数做了4件事情，一个是利用Config类对我们第三步构建好的配置文件进行解析，然后对模型和数据集进行初始化，最后将模型和数据集传入<code>train_detector()</code>函数，准备开始训练流程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># Step1: 解析配置文件, args.config是配置文件路径(如何解析配置文件可以参考本文4.3.3节)</span>cfg <span class="token operator">=</span> Config<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span>args<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token comment"># Step2: 初始化模型, 函数内部调用的是DETECTORS.build(cfg)</span>model <span class="token operator">=</span> build_detector<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>model<span class="token punctuation">)</span>    <span class="token comment"># 初始化模型权重</span>    model<span class="token punctuation">.</span>init_weights<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Step3: 初始化训练集和验证集, 函数内部调用build_from_cfg(cfg, DATASETS), 等价于DATASETS.build(cfg)</span>datasets <span class="token operator">=</span> <span class="token punctuation">[</span>build_dataset<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>train<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>workflow<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        val_dataset <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        val_dataset<span class="token punctuation">.</span>pipeline <span class="token operator">=</span> cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>train<span class="token punctuation">.</span>pipeline <span class="token comment"># 验证集在训练过程中使用train pipeline而不是test pipeline</span>        datasets<span class="token punctuation">.</span>append<span class="token punctuation">(</span>build_dataset<span class="token punctuation">(</span>val_dataset<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># Step4: 传入模型和数据集, 准备开始训练模型</span>    train_detector<span class="token punctuation">(</span>model<span class="token punctuation">,</span> datasets<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<code>train_detector()</code>函数主要是构建了dataloader，初始化了优化器以及runner和hooks，最后调用runner.run开始正式的迭代训练流程。其中涉及到了Runner的概念，不过这里先不展开，我们只要知道Runner也是一个模块，负责模型的迭代训练。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train_detector</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> dataset<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 获取Runner类型, EpochBasedRunner或IterBasedRuner</span>runner_type <span class="token operator">=</span> <span class="token string">'EpochBasedRunner'</span> <span class="token keyword">if</span> <span class="token string">'runner'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> cfg <span class="token keyword">else</span> cfg<span class="token punctuation">.</span>runner<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token comment"># Step1: 获取dataloader, 因为dataset列表里包含了训练集和验证集, 所以使用for循环的方式构建dataloader</span><span class="token comment"># build_dataloader()会用DataLoader类进行dataloader的初始化</span>    data_loaders <span class="token operator">=</span> <span class="token punctuation">[</span>        build_dataloader<span class="token punctuation">(</span>            ds<span class="token punctuation">,</span>            cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>samples_per_gpu<span class="token punctuation">,</span><span class="token comment"># batch_size</span>            runner_type<span class="token operator">=</span>runner_type<span class="token punctuation">)</span> <span class="token keyword">for</span> ds <span class="token keyword">in</span> dataset    <span class="token punctuation">]</span><span class="token comment"># Step2: 封装模型, 为了进行分布式训练</span>model <span class="token operator">=</span> MMDataParallel<span class="token punctuation">(</span>model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>gpu_ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> device_ids<span class="token operator">=</span>cfg<span class="token punctuation">.</span>gpu_ids<span class="token punctuation">)</span><span class="token comment"># Step3: 初始化优化器</span>optimizer <span class="token operator">=</span> build_optimizer<span class="token punctuation">(</span>model<span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>optimizer<span class="token punctuation">)</span><span class="token comment"># Step4: 初始化Runner</span>runner <span class="token operator">=</span> build_runner<span class="token punctuation">(</span>        cfg<span class="token punctuation">.</span>runner<span class="token punctuation">,</span>        default_args<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>model<span class="token operator">=</span>model<span class="token punctuation">,</span> optimizer<span class="token operator">=</span>optimizer<span class="token punctuation">)</span><span class="token comment"># Step5: 注册默认Hook(注册到runner._hooks列表中)</span>runner<span class="token punctuation">.</span>register_training_hooks<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>lr_config<span class="token punctuation">,</span> optimizer_config<span class="token punctuation">,</span>                                   cfg<span class="token punctuation">.</span>checkpoint_config<span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>log_config<span class="token punctuation">,</span>                                   cfg<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'momentum_config'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Step6: 注册自定义Hook(注册到runner._hooks列表中)</span> <span class="token keyword">if</span> cfg<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'custom_hooks'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        custom_hooks <span class="token operator">=</span> cfg<span class="token punctuation">.</span>custom_hooks        <span class="token keyword">for</span> hook_cfg <span class="token keyword">in</span> cfg<span class="token punctuation">.</span>custom_hooks<span class="token punctuation">:</span>            hook_cfg <span class="token operator">=</span> hook_cfg<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>            priority <span class="token operator">=</span> hook_cfg<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">,</span> <span class="token string">'NORMAL'</span><span class="token punctuation">)</span>            hook <span class="token operator">=</span> build_from_cfg<span class="token punctuation">(</span>hook_cfg<span class="token punctuation">,</span> HOOKS<span class="token punctuation">)</span>            runner<span class="token punctuation">.</span>register_hook<span class="token punctuation">(</span>hook<span class="token punctuation">,</span> priority<span class="token operator">=</span>priority<span class="token punctuation">)</span><span class="token comment"># Step7: 开始训练流程</span>    <span class="token keyword">if</span> cfg<span class="token punctuation">.</span>resume_from<span class="token punctuation">:</span>    <span class="token comment"># 恢复检查点</span>        runner<span class="token punctuation">.</span>resume<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>resume_from<span class="token punctuation">)</span>    <span class="token keyword">elif</span> cfg<span class="token punctuation">.</span>load_from<span class="token punctuation">:</span>    <span class="token comment"># 加载预训练模型</span>        runner<span class="token punctuation">.</span>load_checkpoint<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>load_from<span class="token punctuation">)</span>    <span class="token comment"># 调用run()方法, 开始迭代过程</span>    runner<span class="token punctuation">.</span>run<span class="token punctuation">(</span>data_loaders<span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>workflow<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​虽然官方<code>train.py</code>文件写的很长，但是把核心代码扒出来一看，其实都是我们在Pytorch中熟悉的操作。整个train.py的流程如下图所示。</p><p><img src="/./images/MMdetection%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/2.png"></p><h5 id="2-4-2Runner类"><a href="#2-4-2Runner类" class="headerlink" title="2.4.2Runner类"></a>2.4.2Runner类</h5><p>​Runner分为<strong>EpochBasedRunner</strong>和<strong>IterBasedRunner</strong>，顾名思义，前者以epoch的方式管理流程，后者以iter的方式管理流程，它们都是BaseRunner的子类。EpochBasedRunner和IterBasedRunner本身没有重写构造函数，直接继承了BaseRunner的构造函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BaseRunner</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 model<span class="token punctuation">,</span><span class="token comment"># [torch.nn.Module] 要运行的模型</span>                 batch_processor<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token comment"># 该参数一般不使用</span>                 optimizer<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token comment"># [torch.optim.Optimizer] 优化器, 可以是一个也可以是一组通过dict配置的优化器</span>                 work_dir<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token comment"># [str] 保存检查点和Log的目录</span>                 logger<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token comment"># [logging.Logger] 训练中使用的日志记录器</span>                 meta<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token comment"># [dict] 一些信息, 这些信息会在logger hook中记录</span>                 max_iters<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token comment"># [int] 训练epoch数</span>                 max_epochs<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># [int] 训练迭代次数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​BaseRunner的任何子类都需要实现<code>run()</code>、<code>train()</code>、<code>val()</code>和<code>save_checkpoint()</code>四个方法，这也是Runner的核心方法，接下来就以EpochBasedRunner类为例对这四个函数进行详细分析。</p><p>​<strong>run()函数</strong>是Runner类的主调函数，会根据workflow指定的工作流，对data_loaders中的数据进行处理。目前MMCV支持训练和验证两种工作流，对于EpochBasedRunner而言，workflow配置为<code>[(&#39;train&#39;, 2)，(&#39;val&#39;, 1)]</code>表示先训练2个epoch，然后验证一个epoch；<code>[(&#39;train&#39;, 1)]</code>表示只进行训练，不进行验证。如果是IterBasedRunner，<code>[(&#39;train&#39;, 2)，(&#39;val&#39;, 1)]</code>则表示先训练2个iter，然后验证一个iter。然后<code>getattr(self, mode)</code>会根据不同mode调用self.train()函数和self.val()函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_loaders<span class="token punctuation">,</span> workflow<span class="token punctuation">,</span> max_epochs<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> self<span class="token punctuation">.</span>epoch <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>_max_epochs<span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> flow <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>workflow<span class="token punctuation">)</span><span class="token punctuation">:</span>            mode<span class="token punctuation">,</span> epochs <span class="token operator">=</span> flow                        <span class="token comment"># 如果mode='train', 则调用self.train()函数</span>            <span class="token comment"># 如果mode='val', 则调用self.val()函数</span>            epoch_runner <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'train'</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>epoch <span class="token operator">>=</span> self<span class="token punctuation">.</span>_max_epochs<span class="token punctuation">:</span>                    <span class="token keyword">break</span>                <span class="token comment"># 运行train()或val()</span>                epoch_runner<span class="token punctuation">(</span>data_loaders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<code>train()</code>和<code>val()</code>函数循环调用<code>run_iter()</code>完成一个epoch流程。函数开头的self.model.train()和self.model.eval()实际上调用的是torch.nn.module.Module的成员函数，将当前模块设置为训练模式或验证模式，两种不同模式下batchnorm、dropout等层的操作会有区别。然后由于测试过程不需要梯度回传，所以val函数加了一个装饰器<code>@torch.no_grad()</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_loader<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 将模块设置为训练模式</span>    self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">'train'</span>    self<span class="token punctuation">.</span>data_loader <span class="token operator">=</span> data_loader    self<span class="token punctuation">.</span>_max_iters <span class="token operator">=</span> self<span class="token punctuation">.</span>_max_epochs <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_loader<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data_batch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>run_iter<span class="token punctuation">(</span>data_batch<span class="token punctuation">,</span> train_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_iter <span class="token operator">+=</span> <span class="token number">1</span>    self<span class="token punctuation">.</span>_epoch <span class="token operator">+=</span> <span class="token number">1</span><span class="token decorator annotation punctuation">@torch<span class="token punctuation">.</span>no_grad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">val</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_loader<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 将模块设置为验证模式</span>    self<span class="token punctuation">.</span>model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">'val'</span>    self<span class="token punctuation">.</span>data_loader <span class="token operator">=</span> data_loader    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data_batch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>run_iter<span class="token punctuation">(</span>data_batch<span class="token punctuation">,</span> train_mode<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_iter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_batch<span class="token punctuation">,</span> train_mode<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>batch_processor <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        outputs <span class="token operator">=</span> self<span class="token punctuation">.</span>batch_processor<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">,</span> data_batch<span class="token punctuation">,</span> train_mode<span class="token operator">=</span>train_mode<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">elif</span> train_mode<span class="token punctuation">:</span>        outputs <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>train_step<span class="token punctuation">(</span>data_batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>optimizer<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        outputs <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>val_step<span class="token punctuation">(</span>data_batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>optimizer<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>outputs <span class="token operator">=</span> outputs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<code>train()</code>和<code>val()</code>的核心函数是<code>run_iter()</code>，根据train_mode参数调用<code>model.train_step()</code>或<code>model.val_step()</code>，这两个函数最终都会指向我们自己模型的<code>forward()</code>函数，返回模型的前向推理结果（一般是Loss值）。Runner到我们自己的模型中间还会经过MMDataParallel、BaseDetector、SingleStageDetector(或TwoStageDetector)四个类，最终调用我们自己模型的<code>forward()</code>函数，执行推理过程。</p><p><img src="/./images/MMdetection%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/3.png"></p><p>​细心的同学可能会问，怎么从头到尾没看到梯度反传优化这一步骤？MMDetection的梯度优化是通过一个实现了<code>after_train_iter()</code>的Hook实现的，其优先级为ABOVE_NORMAL。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@HOOKS<span class="token punctuation">.</span>register_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">OptimizerHook</span><span class="token punctuation">(</span>Hook<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">after_train_iter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span>    runner<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    runner<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token string">'loss'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>grad_clip <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        grad_norm <span class="token operator">=</span> self<span class="token punctuation">.</span>clip_grads<span class="token punctuation">(</span>runner<span class="token punctuation">.</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> grad_norm <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token comment"># Add grad norm to the logger</span>            runner<span class="token punctuation">.</span>log_buffer<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'grad_norm'</span><span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">(</span>grad_norm<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                                     runner<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token string">'num_samples'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    runner<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​ <strong>save_checkpoint()函数</strong>比较简单，就不过多说明了，最终是调用torch.save将检查点按下列格式保存成文件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">checkpoint <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'meta'</span><span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment"># 环境信息(比如epoch_num, iter_num)</span>  <span class="token string">'state_dict'</span><span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment"># 模型的state_dict()</span>  <span class="token string">'optimizer'</span><span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 优化器的state_dict()</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-注册机制"><a href="#3-注册机制" class="headerlink" title="3.注册机制"></a>3.注册机制</h3><h4 id="3-1Registry类"><a href="#3-1Registry类" class="headerlink" title="3.1Registry类"></a>3.1Registry类</h4><p>​MMDetection作为MMCV的下游项目，继承了MMCV的模块管理方式——注册机制。简单来说，注册机制就是维护几张查询表，key是模块的名称，value是模块的句柄，每张查询表都管理一批功能相似的不同模块。我们每新建一个模块，都要根据模块实现的功能将对应的<code>key-value</code>查询对保存到对应的查询表中，这个保存的过程就称为“<strong>注册</strong>”。当我们想要调用某个模块时，只需要根据模块名称从查询表中找到对应的模块句柄，然后就能完成模块初始化或方法调用等操作。MMCV通过<code>Registry</code>类来实现字符串(key)到类(value)的映射。</p><p>​Registry的构造函数如下所示，变量<code>self._module_dict</code>就是上面提到的“查询表”，注册的模块都会存到这个字典类型的变量里，新建一个Registry实例就是新建一张查询表。另外，Registry还支持继承机制。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> mmcv<span class="token punctuation">.</span>utils <span class="token keyword">import</span> Registry<span class="token keyword">class</span> <span class="token class-name">Registry</span><span class="token punctuation">:</span><span class="token comment"># 构造函数</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> build_func<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> scope<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 注册器的名称</span>        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> name        <span class="token comment"># 使用module_dict管理字符串到类的映射</span>        self<span class="token punctuation">.</span>_module_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 使用children管理注册器的子类</span>        self<span class="token punctuation">.</span>_children <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># build_func按照如下优先级初始化:</span>        <span class="token comment"># 1. build_func: 优先使用指定的函数</span>        <span class="token comment"># 2. parent.build_func: 其次使用父类的build_func</span>        <span class="token comment"># 3. build_from_cfg: 默认从config dict中实例化对象</span>        <span class="token keyword">if</span> build_func <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> parent <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>build_func <span class="token operator">=</span> parent<span class="token punctuation">.</span>build_func            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>build_func <span class="token operator">=</span> build_from_cfg        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>build_func <span class="token operator">=</span> build_func                    <span class="token comment"># 设置父类-子类的从属关系</span>        <span class="token keyword">if</span> parent <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> Registry<span class="token punctuation">)</span>            parent<span class="token punctuation">.</span>_add_children<span class="token punctuation">(</span>self<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>parent <span class="token operator">=</span> parent        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​模块的注册通过Registry的成员函数<code>register_module()</code>来实现，<code>register_module()</code>内部又会调用另一个私有函数<code>_register_module()</code>，模块注册的核心功能其实是在<code>_register_module()</code>中实现的。核心代码也很简单，就是将传入的<code>module_name</code>和<code>module_class</code>保存到字典<code>self._module_dict</code>中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_register_module</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module_class<span class="token punctuation">,</span> module_name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> force<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 如果未指定模块名称则使用默认名称</span>    <span class="token keyword">if</span> module_name <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        module_name <span class="token operator">=</span> module_class<span class="token punctuation">.</span>__name__            <span class="token comment"># 为了支持在nn.Sequentail中构建pytorch模块, module_name为list形式</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>module_name<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        module_name <span class="token operator">=</span> <span class="token punctuation">[</span>module_name<span class="token punctuation">]</span>            <span class="token keyword">for</span> name <span class="token keyword">in</span> module_name<span class="token punctuation">:</span>    <span class="token comment"># 如果force=False, 则不允许注册相同名称的模块</span>    <span class="token comment"># 如果force=True, 则用后一次的注册覆盖前一次</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> force <span class="token keyword">and</span> name <span class="token keyword">in</span> self<span class="token punctuation">.</span>_module_dict<span class="token punctuation">:</span>            <span class="token keyword">raise</span> KeyError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is already registered in </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token comment"># 将当前注册的模块加入到查询表中</span>        self<span class="token punctuation">.</span>_module_dict<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> module_class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​在我们通过字符串获取到一个模块的句柄后，可以通过<code>self.build_func</code>函数句柄来实例化这个模块。<code>build_func</code>可以人为指定，也可以从父类继承，一般来说都是默认使用<code>build_from_cfg()</code>函数，即使用配置参数<code>cfg</code>来初始化该模块。配置参数<code>cfg</code>是一个字典，里面的<code>type</code>字段是模块名称的字符串，其他字段则对应模块构造函数的输入参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_from_cfg</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> registry<span class="token punctuation">,</span> default_args<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> cfg<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将cfg以外的外部传入参数也合并到args中</span>    <span class="token keyword">if</span> default_args <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> default_args<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            args<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token comment"># 获取模块名称</span>    obj_type <span class="token operator">=</span> args<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>obj_type<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># get函数返回registry._module_dict中obj_type对应的模块句柄</span>        obj_cls <span class="token operator">=</span> registry<span class="token punctuation">.</span>get<span class="token punctuation">(</span>obj_type<span class="token punctuation">)</span>        <span class="token keyword">if</span> obj_cls <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> KeyError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>obj_type<span class="token punctuation">&#125;</span></span><span class="token string"> is not in the </span><span class="token interpolation"><span class="token punctuation">&#123;</span>registry<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> registry'</span></span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> inspect<span class="token punctuation">.</span>isclass<span class="token punctuation">(</span>obj_type<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># type值是模块本身</span>        obj_cls <span class="token operator">=</span> obj_type    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'type must be a str or valid type, but got </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">type</span><span class="token punctuation">(</span>obj_type<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token comment"># 模块初始化, 返回模块实例</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> obj_cls<span class="token punctuation">(</span><span class="token operator">**</span>args<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> <span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>obj_cls<span class="token punctuation">.</span>__name__<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​考虑到<code>registry</code>参数需要指向当前注册器本身，我们一般是调用Registry类的<code>build()</code>方法而不是<code>self.build_func</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>build_func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">,</span> registry<span class="token operator">=</span>self<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​下面是一个小例子，模拟了网络模型的注册和调用过程。注意一下，我们打印Registry对象时，实际上打印的是<code>self._module_dict</code>中的values。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 实例化一个注册器用来管理模型</span>MODELS <span class="token operator">=</span> Registry<span class="token punctuation">(</span><span class="token string">'myModels'</span><span class="token punctuation">)</span><span class="token comment"># 方式1: 在类的创建过程中, 使用函数装饰器进行注册(推荐)</span><span class="token decorator annotation punctuation">@MODELS<span class="token punctuation">.</span>register_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ResNet</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>depth <span class="token operator">=</span> depth        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Initialize ResNet&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 方式2: 完成类的创建后, 再显式调用register_module进行注册(不推荐)   </span><span class="token keyword">class</span> <span class="token class-name">FPN</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channel<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>in_channel<span class="token operator">=</span> in_channel        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Initialize FPN&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>in_channel<span class="token punctuation">)</span><span class="token punctuation">)</span>MODELS<span class="token punctuation">.</span>register_module<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'FPN'</span><span class="token punctuation">,</span> module<span class="token operator">=</span>FPN<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>MODELS<span class="token punctuation">)</span><span class="token triple-quoted-string string">""" 打印结果为:Registry(name=myModels, items=&#123;'ResNet': &lt;class '__main__.ResNet'>, 'FPN': &lt;class '__main__.FPN'>&#125;)"""</span><span class="token comment"># 配置参数, 一般cfg从配置文件中获取</span>backbone_cfg <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'ResNet'</span><span class="token punctuation">,</span> depth<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">)</span>neck_cfg <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'FPN'</span><span class="token punctuation">,</span> in_channel<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token comment"># 实例化模型(将配置参数传给模型的构造函数), 得到实例化对象</span>my_backbone <span class="token operator">=</span> MODELS<span class="token punctuation">.</span>build<span class="token punctuation">(</span>backbone_cfg<span class="token punctuation">)</span>my_neck <span class="token operator">=</span> MODELS<span class="token punctuation">.</span>build<span class="token punctuation">(</span>neck_cfg<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_backbone<span class="token punctuation">,</span> my_neck<span class="token punctuation">)</span><span class="token triple-quoted-string string">""" 打印结果为:Initialize ResNet101Initialize FPN256&lt;__main__.ResNet object at 0x000001E68E99E198> &lt;__main__.FPN object at 0x000001E695044B38>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2注册机制步骤"><a href="#3-2注册机制步骤" class="headerlink" title="3.2注册机制步骤"></a>3.2注册机制步骤</h4><ol><li>新建一个类，实现自定义功能</li><li>将该类注册到对应的查询表中（<code>register_module</code>）</li><li>在配置文件中指定该模块的初始化参数</li><li>通过build函数对模块进行实例化（<code>build_from_cfg</code>）</li><li>使用该实例对象执行功能函数</li></ol><h3 id="4-Hook机制"><a href="#4-Hook机制" class="headerlink" title="4.Hook机制"></a>4.Hook机制</h3><h4 id="4-1Hook类"><a href="#4-1Hook类" class="headerlink" title="4.1Hook类"></a>4.1Hook类</h4><p>​MMDetection的整个算法过程就像一个黑盒子：给定输入后（配置文件），黑盒子就会吐出算法结果。整个过程封装度非常高，几乎不需要手写什么代码，但是我们如何在算法执行过程中加入自定义操作呢？这就是Hook机制的作用。</p><p>​简单来说，<strong>Hook可以理解为一种触发器，可以在程序预定义的位置执行预定义的函数</strong>。MMCV根据算法的生命周期预定义了6个可以插入自定义函数的位点，用户可以在每个位点自由地插入任意数量的函数操作，如下图所示：</p><p><img src="/./images/MMdetection%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/4.png"></p><p>​这6个位置基本涵盖了自定义操作可能出现的位置，MMCV已经实现了部分常用Hook，其中默认Hook不需要用户自行注册，通过配置文件配置对应的参数即可；定制Hook则需要用户在配置文件中手动配置<code>custom_hooks</code>字段进行注册。</p><p><img src="/./images/MMdetection%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/5.png"></p><p>​<code>Hook</code>类本身代码很少，只提供了预定义位置的接口函数，任何自定义的Hook都需要继承<code>Hook</code>类，然后根据需要重写对应的接口函数。比如检查点保存操作通常发生在每次迭代或epoch后，所以我们需要重写<code>after_train_iter</code>和<code>after_train_epoch</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Hook</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">before_run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">after_run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">before_epoch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">after_epoch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">before_iter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">after_iter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token decorator annotation punctuation">@HOOKS<span class="token punctuation">.</span>register_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">CheckpointHook</span><span class="token punctuation">(</span>Hook<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 interval<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                 by_epoch<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                 save_optimizer<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                 out_dir<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 max_keep_ckpts<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                 <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">after_train_iter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">after_train_epoch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​和其他模块不同，当我们定义好一个Hook(并注册到<code>HOOKS</code>注册器中)之后，还需要注册到Runner中才能使用，<strong>前后一共进行两次注册</strong>。第一次注册到<code>HOOKS</code>是为了程序能够根据Hook名称找到对应的模块，第二次注册到Runner中是为了程序执行到预定义位置时能够调用对应的函数。</p><p>​ Runner是MMCV用来管理训练过程的一个类，它内部会维护一个list类型变量<code>self._hooks</code>，我们需要把训练过程会调用的Hook<strong>实例对象</strong>按照优先级顺序全部添加到<code>self._hooks</code>中，这个过程通过<code>Runner.register_hook()</code>函数实现。MMCV预定义了几种优先级, 数字越小表示优先级越高, 如果觉得默认的分级方式颗粒度过大, 也<strong>可以直接传入0~100的整数</strong>进行精细划分。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">register_hook</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> hook<span class="token punctuation">,</span> priority<span class="token operator">=</span><span class="token string">'NORMAL'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""预定义优先级    +--------------+------------+    | Level        | Value      |    +==============+============+    | HIGHEST      | 0          |    +--------------+------------+    | VERY_HIGH    | 10         |    +--------------+------------+    | HIGH         | 30         |    +--------------+------------+    | ABOVE_NORMAL | 40         |    +--------------+------------+    | NORMAL       | 50         |    +--------------+------------+    | BELOW_NORMAL | 60         |    +--------------+------------+    | LOW          | 70         |    +--------------+------------+    | VERY_LOW     | 90         |    +--------------+------------+    | LOWEST       | 100        |    +--------------+------------+    """</span>    hook<span class="token punctuation">.</span>priority <span class="token operator">=</span> priority    <span class="token comment"># 插入法排序将Hooks按照priority大小升序排列</span>    inserted <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_hooks<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> priority <span class="token operator">>=</span> self<span class="token punctuation">.</span>_hooks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>priority<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_hooks<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hook<span class="token punctuation">)</span>            inserted <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> inserted<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_hooks<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> hook<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​将Hook实例加入到<code>self._hooks</code>中之后，然后就可以在预定义位置调用<code>call_hook()</code>来调用各个Hook实例中的对应方法。<code>call_hook()</code>称为回调函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 开始运行时调用</span>self<span class="token punctuation">.</span>call_hook<span class="token punctuation">(</span><span class="token string">'after_train_epoch'</span><span class="token punctuation">)</span><span class="token keyword">while</span> self<span class="token punctuation">.</span>epoch <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>_max_epochs<span class="token punctuation">:</span>    <span class="token comment"># 开始 epoch 迭代前调用</span>    self<span class="token punctuation">.</span>call_hook<span class="token punctuation">(</span><span class="token string">'before_train_epoch'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data_batch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 开始 iter 迭代前调用</span>        self<span class="token punctuation">.</span>call_hook<span class="token punctuation">(</span><span class="token string">'before_train_iter'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>train_step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 经过一次迭代后调用</span>        self<span class="token punctuation">.</span>call_hook<span class="token punctuation">(</span><span class="token string">'after_train_iter'</span><span class="token punctuation">)</span>    <span class="token comment"># 经过一个 epoch 迭代后调用</span>    self<span class="token punctuation">.</span>call_hook<span class="token punctuation">(</span><span class="token string">'after_train_epoch'</span><span class="token punctuation">)</span><span class="token comment"># 运行完成前调用</span>self<span class="token punctuation">.</span>call_hook<span class="token punctuation">(</span><span class="token string">'after_train_epoch'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​调用<code>call_hook()</code>时会遍历<code>self._hooks</code>中所有Hook实例，并根据<code>fn_name</code>调用Hook实例的指定成员函数。比如<code>fn_name=&#39;before_train_epoch&#39;</code>时，<code>call_hook()</code>会挨个调用所有Hook的<code>before_train_epoch()</code>函数。而且由于<code>self._hooks</code>已经按照优先级进行过排序，<code>call_hook()</code>会先调用优先级高的Hook方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">call_hook</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fn_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> hook <span class="token keyword">in</span> self<span class="token punctuation">.</span>_hooks<span class="token punctuation">:</span>        <span class="token builtin">getattr</span><span class="token punctuation">(</span>hook<span class="token punctuation">,</span> fn_name<span class="token punctuation">)</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-2-Hool机制步骤"><a href="#4-2-Hool机制步骤" class="headerlink" title="4.2 Hool机制步骤"></a>4.2 Hool机制步骤</h4><ol><li>定义一个类，继承Hook基类</li><li>根据自定义Hook的功能有选择地重写Hook基类中对应的函数</li><li>注册自定义Hook模块到HOOKS查询表中（<code>register_module</code>）</li><li>实例化Hook模块并注册到Runner中（<code>register_hook</code>）</li><li>使用回调函数调用重写的Hook函数（<code>call_hook</code>）</li></ol>]]></content>
      
      
      <categories>
          
          <category> MMDetection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MMDetection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客文章写作范例</title>
      <link href="/2018/09/07/paper-test/"/>
      <url>/2018/09/07/paper-test/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
